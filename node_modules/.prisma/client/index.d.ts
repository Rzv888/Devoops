
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model admin
 * 
 */
export type admin = $Result.DefaultSelection<Prisma.$adminPayload>
/**
 * Model event
 * 
 */
export type event = $Result.DefaultSelection<Prisma.$eventPayload>
/**
 * Model user
 * 
 */
export type user = $Result.DefaultSelection<Prisma.$userPayload>
/**
 * Model user_registered
 * 
 */
export type user_registered = $Result.DefaultSelection<Prisma.$user_registeredPayload>
/**
 * Model admin_session
 * 
 */
export type admin_session = $Result.DefaultSelection<Prisma.$admin_sessionPayload>
/**
 * Model user_session
 * 
 */
export type user_session = $Result.DefaultSelection<Prisma.$user_sessionPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const event_status: {
  PENDING: 'PENDING',
  REJECTED: 'REJECTED',
  ACCEPTED: 'ACCEPTED'
};

export type event_status = (typeof event_status)[keyof typeof event_status]


export const user_gender: {
  L: 'L',
  P: 'P'
};

export type user_gender = (typeof user_gender)[keyof typeof user_gender]


export const usreg_status: {
  REJECTED: 'REJECTED',
  ACCEPTED: 'ACCEPTED'
};

export type usreg_status = (typeof usreg_status)[keyof typeof usreg_status]

}

export type event_status = $Enums.event_status

export const event_status: typeof $Enums.event_status

export type user_gender = $Enums.user_gender

export const user_gender: typeof $Enums.user_gender

export type usreg_status = $Enums.usreg_status

export const usreg_status: typeof $Enums.usreg_status

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Admins
 * const admins = await prisma.admin.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Admins
   * const admins = await prisma.admin.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.admin`: Exposes CRUD operations for the **admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.adminDelegate<ExtArgs>;

  /**
   * `prisma.event`: Exposes CRUD operations for the **event** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Events
    * const events = await prisma.event.findMany()
    * ```
    */
  get event(): Prisma.eventDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<ExtArgs>;

  /**
   * `prisma.user_registered`: Exposes CRUD operations for the **user_registered** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_registereds
    * const user_registereds = await prisma.user_registered.findMany()
    * ```
    */
  get user_registered(): Prisma.user_registeredDelegate<ExtArgs>;

  /**
   * `prisma.admin_session`: Exposes CRUD operations for the **admin_session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admin_sessions
    * const admin_sessions = await prisma.admin_session.findMany()
    * ```
    */
  get admin_session(): Prisma.admin_sessionDelegate<ExtArgs>;

  /**
   * `prisma.user_session`: Exposes CRUD operations for the **user_session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_sessions
    * const user_sessions = await prisma.user_session.findMany()
    * ```
    */
  get user_session(): Prisma.user_sessionDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.11.0
   * Query Engine version: efd2449663b3d73d637ea1fd226bafbcf45b3102
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    admin: 'admin',
    event: 'event',
    user: 'user',
    user_registered: 'user_registered',
    admin_session: 'admin_session',
    user_session: 'user_session'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'admin' | 'event' | 'user' | 'user_registered' | 'admin_session' | 'user_session'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      admin: {
        payload: Prisma.$adminPayload<ExtArgs>
        fields: Prisma.adminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.adminFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$adminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.adminFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$adminPayload>
          }
          findFirst: {
            args: Prisma.adminFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$adminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.adminFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$adminPayload>
          }
          findMany: {
            args: Prisma.adminFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$adminPayload>[]
          }
          create: {
            args: Prisma.adminCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$adminPayload>
          }
          createMany: {
            args: Prisma.adminCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.adminDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$adminPayload>
          }
          update: {
            args: Prisma.adminUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$adminPayload>
          }
          deleteMany: {
            args: Prisma.adminDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.adminUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.adminUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$adminPayload>
          }
          aggregate: {
            args: Prisma.AdminAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAdmin>
          }
          groupBy: {
            args: Prisma.adminGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.adminCountArgs<ExtArgs>,
            result: $Utils.Optional<AdminCountAggregateOutputType> | number
          }
        }
      }
      event: {
        payload: Prisma.$eventPayload<ExtArgs>
        fields: Prisma.eventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.eventFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$eventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.eventFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$eventPayload>
          }
          findFirst: {
            args: Prisma.eventFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$eventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.eventFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$eventPayload>
          }
          findMany: {
            args: Prisma.eventFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$eventPayload>[]
          }
          create: {
            args: Prisma.eventCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$eventPayload>
          }
          createMany: {
            args: Prisma.eventCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.eventDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$eventPayload>
          }
          update: {
            args: Prisma.eventUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$eventPayload>
          }
          deleteMany: {
            args: Prisma.eventDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.eventUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.eventUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$eventPayload>
          }
          aggregate: {
            args: Prisma.EventAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEvent>
          }
          groupBy: {
            args: Prisma.eventGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EventGroupByOutputType>[]
          }
          count: {
            args: Prisma.eventCountArgs<ExtArgs>,
            result: $Utils.Optional<EventCountAggregateOutputType> | number
          }
        }
      }
      user: {
        payload: Prisma.$userPayload<ExtArgs>
        fields: Prisma.userFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findFirst: {
            args: Prisma.userFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findMany: {
            args: Prisma.userFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>[]
          }
          create: {
            args: Prisma.userCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          createMany: {
            args: Prisma.userCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.userDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          update: {
            args: Prisma.userUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          deleteMany: {
            args: Prisma.userDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.userUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.userUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.userGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.userCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      user_registered: {
        payload: Prisma.$user_registeredPayload<ExtArgs>
        fields: Prisma.user_registeredFieldRefs
        operations: {
          findUnique: {
            args: Prisma.user_registeredFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_registeredPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.user_registeredFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_registeredPayload>
          }
          findFirst: {
            args: Prisma.user_registeredFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_registeredPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.user_registeredFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_registeredPayload>
          }
          findMany: {
            args: Prisma.user_registeredFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_registeredPayload>[]
          }
          create: {
            args: Prisma.user_registeredCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_registeredPayload>
          }
          createMany: {
            args: Prisma.user_registeredCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.user_registeredDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_registeredPayload>
          }
          update: {
            args: Prisma.user_registeredUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_registeredPayload>
          }
          deleteMany: {
            args: Prisma.user_registeredDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.user_registeredUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.user_registeredUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_registeredPayload>
          }
          aggregate: {
            args: Prisma.User_registeredAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser_registered>
          }
          groupBy: {
            args: Prisma.user_registeredGroupByArgs<ExtArgs>,
            result: $Utils.Optional<User_registeredGroupByOutputType>[]
          }
          count: {
            args: Prisma.user_registeredCountArgs<ExtArgs>,
            result: $Utils.Optional<User_registeredCountAggregateOutputType> | number
          }
        }
      }
      admin_session: {
        payload: Prisma.$admin_sessionPayload<ExtArgs>
        fields: Prisma.admin_sessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.admin_sessionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$admin_sessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.admin_sessionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$admin_sessionPayload>
          }
          findFirst: {
            args: Prisma.admin_sessionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$admin_sessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.admin_sessionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$admin_sessionPayload>
          }
          findMany: {
            args: Prisma.admin_sessionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$admin_sessionPayload>[]
          }
          create: {
            args: Prisma.admin_sessionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$admin_sessionPayload>
          }
          createMany: {
            args: Prisma.admin_sessionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.admin_sessionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$admin_sessionPayload>
          }
          update: {
            args: Prisma.admin_sessionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$admin_sessionPayload>
          }
          deleteMany: {
            args: Prisma.admin_sessionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.admin_sessionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.admin_sessionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$admin_sessionPayload>
          }
          aggregate: {
            args: Prisma.Admin_sessionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAdmin_session>
          }
          groupBy: {
            args: Prisma.admin_sessionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Admin_sessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.admin_sessionCountArgs<ExtArgs>,
            result: $Utils.Optional<Admin_sessionCountAggregateOutputType> | number
          }
        }
      }
      user_session: {
        payload: Prisma.$user_sessionPayload<ExtArgs>
        fields: Prisma.user_sessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.user_sessionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_sessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.user_sessionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_sessionPayload>
          }
          findFirst: {
            args: Prisma.user_sessionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_sessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.user_sessionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_sessionPayload>
          }
          findMany: {
            args: Prisma.user_sessionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_sessionPayload>[]
          }
          create: {
            args: Prisma.user_sessionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_sessionPayload>
          }
          createMany: {
            args: Prisma.user_sessionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.user_sessionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_sessionPayload>
          }
          update: {
            args: Prisma.user_sessionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_sessionPayload>
          }
          deleteMany: {
            args: Prisma.user_sessionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.user_sessionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.user_sessionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_sessionPayload>
          }
          aggregate: {
            args: Prisma.User_sessionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser_session>
          }
          groupBy: {
            args: Prisma.user_sessionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<User_sessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.user_sessionCountArgs<ExtArgs>,
            result: $Utils.Optional<User_sessionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AdminCountOutputType
   */

  export type AdminCountOutputType = {
    admin_session: number
  }

  export type AdminCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin_session?: boolean | AdminCountOutputTypeCountAdmin_sessionArgs
  }

  // Custom InputTypes

  /**
   * AdminCountOutputType without action
   */
  export type AdminCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminCountOutputType
     */
    select?: AdminCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AdminCountOutputType without action
   */
  export type AdminCountOutputTypeCountAdmin_sessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: admin_sessionWhereInput
  }



  /**
   * Count Type EventCountOutputType
   */

  export type EventCountOutputType = {
    user_registered: number
  }

  export type EventCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user_registered?: boolean | EventCountOutputTypeCountUser_registeredArgs
  }

  // Custom InputTypes

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventCountOutputType
     */
    select?: EventCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountUser_registeredArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_registeredWhereInput
  }



  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    event: number
    user_registered: number
    user_session: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | UserCountOutputTypeCountEventArgs
    user_registered?: boolean | UserCountOutputTypeCountUser_registeredArgs
    user_session?: boolean | UserCountOutputTypeCountUser_sessionArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountEventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: eventWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUser_registeredArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_registeredWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUser_sessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_sessionWhereInput
  }



  /**
   * Models
   */

  /**
   * Model admin
   */

  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminAvgAggregateOutputType = {
    id: number | null
  }

  export type AdminSumAggregateOutputType = {
    id: number | null
  }

  export type AdminMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
  }

  export type AdminMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
  }

  export type AdminCountAggregateOutputType = {
    id: number
    email: number
    password: number
    _all: number
  }


  export type AdminAvgAggregateInputType = {
    id?: true
  }

  export type AdminSumAggregateInputType = {
    id?: true
  }

  export type AdminMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
  }

  export type AdminMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
  }

  export type AdminCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    _all?: true
  }

  export type AdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which admin to aggregate.
     */
    where?: adminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of admins to fetch.
     */
    orderBy?: adminOrderByWithRelationInput | adminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: adminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdminAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdminSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type adminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: adminWhereInput
    orderBy?: adminOrderByWithAggregationInput | adminOrderByWithAggregationInput[]
    by: AdminScalarFieldEnum[] | AdminScalarFieldEnum
    having?: adminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _avg?: AdminAvgAggregateInputType
    _sum?: AdminSumAggregateInputType
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }

  export type AdminGroupByOutputType = {
    id: number
    email: string | null
    password: string | null
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends adminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type adminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    admin_session?: boolean | admin$admin_sessionArgs<ExtArgs>
    _count?: boolean | AdminCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["admin"]>

  export type adminSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
  }

  export type adminInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin_session?: boolean | admin$admin_sessionArgs<ExtArgs>
    _count?: boolean | AdminCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $adminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "admin"
    objects: {
      admin_session: Prisma.$admin_sessionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string | null
      password: string | null
    }, ExtArgs["result"]["admin"]>
    composites: {}
  }


  type adminGetPayload<S extends boolean | null | undefined | adminDefaultArgs> = $Result.GetResult<Prisma.$adminPayload, S>

  type adminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<adminFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AdminCountAggregateInputType | true
    }

  export interface adminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['admin'], meta: { name: 'admin' } }
    /**
     * Find zero or one Admin that matches the filter.
     * @param {adminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends adminFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, adminFindUniqueArgs<ExtArgs>>
    ): Prisma__adminClient<$Result.GetResult<Prisma.$adminPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Admin that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {adminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends adminFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, adminFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__adminClient<$Result.GetResult<Prisma.$adminPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends adminFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, adminFindFirstArgs<ExtArgs>>
    ): Prisma__adminClient<$Result.GetResult<Prisma.$adminPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Admin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends adminFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, adminFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__adminClient<$Result.GetResult<Prisma.$adminPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adminFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminWithIdOnly = await prisma.admin.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends adminFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, adminFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$adminPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Admin.
     * @param {adminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
    **/
    create<T extends adminCreateArgs<ExtArgs>>(
      args: SelectSubset<T, adminCreateArgs<ExtArgs>>
    ): Prisma__adminClient<$Result.GetResult<Prisma.$adminPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Admins.
     *     @param {adminCreateManyArgs} args - Arguments to create many Admins.
     *     @example
     *     // Create many Admins
     *     const admin = await prisma.admin.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends adminCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, adminCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Admin.
     * @param {adminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
    **/
    delete<T extends adminDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, adminDeleteArgs<ExtArgs>>
    ): Prisma__adminClient<$Result.GetResult<Prisma.$adminPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Admin.
     * @param {adminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends adminUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, adminUpdateArgs<ExtArgs>>
    ): Prisma__adminClient<$Result.GetResult<Prisma.$adminPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Admins.
     * @param {adminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends adminDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, adminDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends adminUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, adminUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Admin.
     * @param {adminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
    **/
    upsert<T extends adminUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, adminUpsertArgs<ExtArgs>>
    ): Prisma__adminClient<$Result.GetResult<Prisma.$adminPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends adminCountArgs>(
      args?: Subset<T, adminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): Prisma.PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends adminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: adminGroupByArgs['orderBy'] }
        : { orderBy?: adminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, adminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the admin model
   */
  readonly fields: adminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__adminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    admin_session<T extends admin$admin_sessionArgs<ExtArgs> = {}>(args?: Subset<T, admin$admin_sessionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$admin_sessionPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the admin model
   */ 
  interface adminFieldRefs {
    readonly id: FieldRef<"admin", 'Int'>
    readonly email: FieldRef<"admin", 'String'>
    readonly password: FieldRef<"admin", 'String'>
  }
    

  // Custom InputTypes

  /**
   * admin findUnique
   */
  export type adminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin
     */
    select?: adminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: adminInclude<ExtArgs> | null
    /**
     * Filter, which admin to fetch.
     */
    where: adminWhereUniqueInput
  }


  /**
   * admin findUniqueOrThrow
   */
  export type adminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin
     */
    select?: adminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: adminInclude<ExtArgs> | null
    /**
     * Filter, which admin to fetch.
     */
    where: adminWhereUniqueInput
  }


  /**
   * admin findFirst
   */
  export type adminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin
     */
    select?: adminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: adminInclude<ExtArgs> | null
    /**
     * Filter, which admin to fetch.
     */
    where?: adminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of admins to fetch.
     */
    orderBy?: adminOrderByWithRelationInput | adminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for admins.
     */
    cursor?: adminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }


  /**
   * admin findFirstOrThrow
   */
  export type adminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin
     */
    select?: adminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: adminInclude<ExtArgs> | null
    /**
     * Filter, which admin to fetch.
     */
    where?: adminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of admins to fetch.
     */
    orderBy?: adminOrderByWithRelationInput | adminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for admins.
     */
    cursor?: adminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }


  /**
   * admin findMany
   */
  export type adminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin
     */
    select?: adminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: adminInclude<ExtArgs> | null
    /**
     * Filter, which admins to fetch.
     */
    where?: adminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of admins to fetch.
     */
    orderBy?: adminOrderByWithRelationInput | adminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing admins.
     */
    cursor?: adminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` admins.
     */
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }


  /**
   * admin create
   */
  export type adminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin
     */
    select?: adminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: adminInclude<ExtArgs> | null
    /**
     * The data needed to create a admin.
     */
    data?: XOR<adminCreateInput, adminUncheckedCreateInput>
  }


  /**
   * admin createMany
   */
  export type adminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many admins.
     */
    data: adminCreateManyInput | adminCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * admin update
   */
  export type adminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin
     */
    select?: adminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: adminInclude<ExtArgs> | null
    /**
     * The data needed to update a admin.
     */
    data: XOR<adminUpdateInput, adminUncheckedUpdateInput>
    /**
     * Choose, which admin to update.
     */
    where: adminWhereUniqueInput
  }


  /**
   * admin updateMany
   */
  export type adminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update admins.
     */
    data: XOR<adminUpdateManyMutationInput, adminUncheckedUpdateManyInput>
    /**
     * Filter which admins to update
     */
    where?: adminWhereInput
  }


  /**
   * admin upsert
   */
  export type adminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin
     */
    select?: adminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: adminInclude<ExtArgs> | null
    /**
     * The filter to search for the admin to update in case it exists.
     */
    where: adminWhereUniqueInput
    /**
     * In case the admin found by the `where` argument doesn't exist, create a new admin with this data.
     */
    create: XOR<adminCreateInput, adminUncheckedCreateInput>
    /**
     * In case the admin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<adminUpdateInput, adminUncheckedUpdateInput>
  }


  /**
   * admin delete
   */
  export type adminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin
     */
    select?: adminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: adminInclude<ExtArgs> | null
    /**
     * Filter which admin to delete.
     */
    where: adminWhereUniqueInput
  }


  /**
   * admin deleteMany
   */
  export type adminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which admins to delete
     */
    where?: adminWhereInput
  }


  /**
   * admin.admin_session
   */
  export type admin$admin_sessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin_session
     */
    select?: admin_sessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: admin_sessionInclude<ExtArgs> | null
    where?: admin_sessionWhereInput
    orderBy?: admin_sessionOrderByWithRelationInput | admin_sessionOrderByWithRelationInput[]
    cursor?: admin_sessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Admin_sessionScalarFieldEnum | Admin_sessionScalarFieldEnum[]
  }


  /**
   * admin without action
   */
  export type adminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin
     */
    select?: adminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: adminInclude<ExtArgs> | null
  }



  /**
   * Model event
   */

  export type AggregateEvent = {
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  export type EventAvgAggregateOutputType = {
    id: number | null
  }

  export type EventSumAggregateOutputType = {
    id: number | null
  }

  export type EventMinAggregateOutputType = {
    id: number | null
    nama_event: string | null
    deskripsi_event: string | null
    poster_event: string | null
    penyelenggara_event: string | null
    benefit_event: string | null
    kepanitiaan_mulai: Date | null
    kepanitiaan_selesai: Date | null
    klasifikasi_divisi: string | null
    event_mulai: Date | null
    event_selesai: Date | null
    email_event: string | null
    status: $Enums.event_status | null
    created_at: Date | null
    user_nim: string | null
  }

  export type EventMaxAggregateOutputType = {
    id: number | null
    nama_event: string | null
    deskripsi_event: string | null
    poster_event: string | null
    penyelenggara_event: string | null
    benefit_event: string | null
    kepanitiaan_mulai: Date | null
    kepanitiaan_selesai: Date | null
    klasifikasi_divisi: string | null
    event_mulai: Date | null
    event_selesai: Date | null
    email_event: string | null
    status: $Enums.event_status | null
    created_at: Date | null
    user_nim: string | null
  }

  export type EventCountAggregateOutputType = {
    id: number
    nama_event: number
    deskripsi_event: number
    poster_event: number
    penyelenggara_event: number
    benefit_event: number
    kepanitiaan_mulai: number
    kepanitiaan_selesai: number
    klasifikasi_divisi: number
    event_mulai: number
    event_selesai: number
    email_event: number
    status: number
    created_at: number
    user_nim: number
    _all: number
  }


  export type EventAvgAggregateInputType = {
    id?: true
  }

  export type EventSumAggregateInputType = {
    id?: true
  }

  export type EventMinAggregateInputType = {
    id?: true
    nama_event?: true
    deskripsi_event?: true
    poster_event?: true
    penyelenggara_event?: true
    benefit_event?: true
    kepanitiaan_mulai?: true
    kepanitiaan_selesai?: true
    klasifikasi_divisi?: true
    event_mulai?: true
    event_selesai?: true
    email_event?: true
    status?: true
    created_at?: true
    user_nim?: true
  }

  export type EventMaxAggregateInputType = {
    id?: true
    nama_event?: true
    deskripsi_event?: true
    poster_event?: true
    penyelenggara_event?: true
    benefit_event?: true
    kepanitiaan_mulai?: true
    kepanitiaan_selesai?: true
    klasifikasi_divisi?: true
    event_mulai?: true
    event_selesai?: true
    email_event?: true
    status?: true
    created_at?: true
    user_nim?: true
  }

  export type EventCountAggregateInputType = {
    id?: true
    nama_event?: true
    deskripsi_event?: true
    poster_event?: true
    penyelenggara_event?: true
    benefit_event?: true
    kepanitiaan_mulai?: true
    kepanitiaan_selesai?: true
    klasifikasi_divisi?: true
    event_mulai?: true
    event_selesai?: true
    email_event?: true
    status?: true
    created_at?: true
    user_nim?: true
    _all?: true
  }

  export type EventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which event to aggregate.
     */
    where?: eventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of events to fetch.
     */
    orderBy?: eventOrderByWithRelationInput | eventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: eventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned events
    **/
    _count?: true | EventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventMaxAggregateInputType
  }

  export type GetEventAggregateType<T extends EventAggregateArgs> = {
        [P in keyof T & keyof AggregateEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvent[P]>
      : GetScalarType<T[P], AggregateEvent[P]>
  }




  export type eventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: eventWhereInput
    orderBy?: eventOrderByWithAggregationInput | eventOrderByWithAggregationInput[]
    by: EventScalarFieldEnum[] | EventScalarFieldEnum
    having?: eventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventCountAggregateInputType | true
    _avg?: EventAvgAggregateInputType
    _sum?: EventSumAggregateInputType
    _min?: EventMinAggregateInputType
    _max?: EventMaxAggregateInputType
  }

  export type EventGroupByOutputType = {
    id: number
    nama_event: string
    deskripsi_event: string | null
    poster_event: string
    penyelenggara_event: string
    benefit_event: string | null
    kepanitiaan_mulai: Date
    kepanitiaan_selesai: Date
    klasifikasi_divisi: string | null
    event_mulai: Date
    event_selesai: Date
    email_event: string | null
    status: $Enums.event_status | null
    created_at: Date
    user_nim: string | null
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  type GetEventGroupByPayload<T extends eventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventGroupByOutputType[P]>
            : GetScalarType<T[P], EventGroupByOutputType[P]>
        }
      >
    >


  export type eventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nama_event?: boolean
    deskripsi_event?: boolean
    poster_event?: boolean
    penyelenggara_event?: boolean
    benefit_event?: boolean
    kepanitiaan_mulai?: boolean
    kepanitiaan_selesai?: boolean
    klasifikasi_divisi?: boolean
    event_mulai?: boolean
    event_selesai?: boolean
    email_event?: boolean
    status?: boolean
    created_at?: boolean
    user_nim?: boolean
    user?: boolean | event$userArgs<ExtArgs>
    user_registered?: boolean | event$user_registeredArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type eventSelectScalar = {
    id?: boolean
    nama_event?: boolean
    deskripsi_event?: boolean
    poster_event?: boolean
    penyelenggara_event?: boolean
    benefit_event?: boolean
    kepanitiaan_mulai?: boolean
    kepanitiaan_selesai?: boolean
    klasifikasi_divisi?: boolean
    event_mulai?: boolean
    event_selesai?: boolean
    email_event?: boolean
    status?: boolean
    created_at?: boolean
    user_nim?: boolean
  }

  export type eventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | event$userArgs<ExtArgs>
    user_registered?: boolean | event$user_registeredArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $eventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "event"
    objects: {
      user: Prisma.$userPayload<ExtArgs> | null
      user_registered: Prisma.$user_registeredPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nama_event: string
      deskripsi_event: string | null
      poster_event: string
      penyelenggara_event: string
      benefit_event: string | null
      kepanitiaan_mulai: Date
      kepanitiaan_selesai: Date
      klasifikasi_divisi: string | null
      event_mulai: Date
      event_selesai: Date
      email_event: string | null
      status: $Enums.event_status | null
      created_at: Date
      user_nim: string | null
    }, ExtArgs["result"]["event"]>
    composites: {}
  }


  type eventGetPayload<S extends boolean | null | undefined | eventDefaultArgs> = $Result.GetResult<Prisma.$eventPayload, S>

  type eventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<eventFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EventCountAggregateInputType | true
    }

  export interface eventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['event'], meta: { name: 'event' } }
    /**
     * Find zero or one Event that matches the filter.
     * @param {eventFindUniqueArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends eventFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, eventFindUniqueArgs<ExtArgs>>
    ): Prisma__eventClient<$Result.GetResult<Prisma.$eventPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Event that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {eventFindUniqueOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends eventFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, eventFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__eventClient<$Result.GetResult<Prisma.$eventPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Event that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {eventFindFirstArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends eventFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, eventFindFirstArgs<ExtArgs>>
    ): Prisma__eventClient<$Result.GetResult<Prisma.$eventPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Event that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {eventFindFirstOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends eventFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, eventFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__eventClient<$Result.GetResult<Prisma.$eventPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {eventFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Events
     * const events = await prisma.event.findMany()
     * 
     * // Get first 10 Events
     * const events = await prisma.event.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventWithIdOnly = await prisma.event.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends eventFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, eventFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$eventPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Event.
     * @param {eventCreateArgs} args - Arguments to create a Event.
     * @example
     * // Create one Event
     * const Event = await prisma.event.create({
     *   data: {
     *     // ... data to create a Event
     *   }
     * })
     * 
    **/
    create<T extends eventCreateArgs<ExtArgs>>(
      args: SelectSubset<T, eventCreateArgs<ExtArgs>>
    ): Prisma__eventClient<$Result.GetResult<Prisma.$eventPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Events.
     *     @param {eventCreateManyArgs} args - Arguments to create many Events.
     *     @example
     *     // Create many Events
     *     const event = await prisma.event.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends eventCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, eventCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Event.
     * @param {eventDeleteArgs} args - Arguments to delete one Event.
     * @example
     * // Delete one Event
     * const Event = await prisma.event.delete({
     *   where: {
     *     // ... filter to delete one Event
     *   }
     * })
     * 
    **/
    delete<T extends eventDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, eventDeleteArgs<ExtArgs>>
    ): Prisma__eventClient<$Result.GetResult<Prisma.$eventPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Event.
     * @param {eventUpdateArgs} args - Arguments to update one Event.
     * @example
     * // Update one Event
     * const event = await prisma.event.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends eventUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, eventUpdateArgs<ExtArgs>>
    ): Prisma__eventClient<$Result.GetResult<Prisma.$eventPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Events.
     * @param {eventDeleteManyArgs} args - Arguments to filter Events to delete.
     * @example
     * // Delete a few Events
     * const { count } = await prisma.event.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends eventDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, eventDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {eventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends eventUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, eventUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Event.
     * @param {eventUpsertArgs} args - Arguments to update or create a Event.
     * @example
     * // Update or create a Event
     * const event = await prisma.event.upsert({
     *   create: {
     *     // ... data to create a Event
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Event we want to update
     *   }
     * })
    **/
    upsert<T extends eventUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, eventUpsertArgs<ExtArgs>>
    ): Prisma__eventClient<$Result.GetResult<Prisma.$eventPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {eventCountArgs} args - Arguments to filter Events to count.
     * @example
     * // Count the number of Events
     * const count = await prisma.event.count({
     *   where: {
     *     // ... the filter for the Events we want to count
     *   }
     * })
    **/
    count<T extends eventCountArgs>(
      args?: Subset<T, eventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventAggregateArgs>(args: Subset<T, EventAggregateArgs>): Prisma.PrismaPromise<GetEventAggregateType<T>>

    /**
     * Group by Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {eventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends eventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: eventGroupByArgs['orderBy'] }
        : { orderBy?: eventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, eventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the event model
   */
  readonly fields: eventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for event.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__eventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends event$userArgs<ExtArgs> = {}>(args?: Subset<T, event$userArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    user_registered<T extends event$user_registeredArgs<ExtArgs> = {}>(args?: Subset<T, event$user_registeredArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_registeredPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the event model
   */ 
  interface eventFieldRefs {
    readonly id: FieldRef<"event", 'Int'>
    readonly nama_event: FieldRef<"event", 'String'>
    readonly deskripsi_event: FieldRef<"event", 'String'>
    readonly poster_event: FieldRef<"event", 'String'>
    readonly penyelenggara_event: FieldRef<"event", 'String'>
    readonly benefit_event: FieldRef<"event", 'String'>
    readonly kepanitiaan_mulai: FieldRef<"event", 'DateTime'>
    readonly kepanitiaan_selesai: FieldRef<"event", 'DateTime'>
    readonly klasifikasi_divisi: FieldRef<"event", 'String'>
    readonly event_mulai: FieldRef<"event", 'DateTime'>
    readonly event_selesai: FieldRef<"event", 'DateTime'>
    readonly email_event: FieldRef<"event", 'String'>
    readonly status: FieldRef<"event", 'event_status'>
    readonly created_at: FieldRef<"event", 'DateTime'>
    readonly user_nim: FieldRef<"event", 'String'>
  }
    

  // Custom InputTypes

  /**
   * event findUnique
   */
  export type eventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event
     */
    select?: eventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: eventInclude<ExtArgs> | null
    /**
     * Filter, which event to fetch.
     */
    where: eventWhereUniqueInput
  }


  /**
   * event findUniqueOrThrow
   */
  export type eventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event
     */
    select?: eventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: eventInclude<ExtArgs> | null
    /**
     * Filter, which event to fetch.
     */
    where: eventWhereUniqueInput
  }


  /**
   * event findFirst
   */
  export type eventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event
     */
    select?: eventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: eventInclude<ExtArgs> | null
    /**
     * Filter, which event to fetch.
     */
    where?: eventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of events to fetch.
     */
    orderBy?: eventOrderByWithRelationInput | eventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for events.
     */
    cursor?: eventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }


  /**
   * event findFirstOrThrow
   */
  export type eventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event
     */
    select?: eventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: eventInclude<ExtArgs> | null
    /**
     * Filter, which event to fetch.
     */
    where?: eventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of events to fetch.
     */
    orderBy?: eventOrderByWithRelationInput | eventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for events.
     */
    cursor?: eventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }


  /**
   * event findMany
   */
  export type eventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event
     */
    select?: eventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: eventInclude<ExtArgs> | null
    /**
     * Filter, which events to fetch.
     */
    where?: eventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of events to fetch.
     */
    orderBy?: eventOrderByWithRelationInput | eventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing events.
     */
    cursor?: eventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` events.
     */
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }


  /**
   * event create
   */
  export type eventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event
     */
    select?: eventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: eventInclude<ExtArgs> | null
    /**
     * The data needed to create a event.
     */
    data: XOR<eventCreateInput, eventUncheckedCreateInput>
  }


  /**
   * event createMany
   */
  export type eventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many events.
     */
    data: eventCreateManyInput | eventCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * event update
   */
  export type eventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event
     */
    select?: eventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: eventInclude<ExtArgs> | null
    /**
     * The data needed to update a event.
     */
    data: XOR<eventUpdateInput, eventUncheckedUpdateInput>
    /**
     * Choose, which event to update.
     */
    where: eventWhereUniqueInput
  }


  /**
   * event updateMany
   */
  export type eventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update events.
     */
    data: XOR<eventUpdateManyMutationInput, eventUncheckedUpdateManyInput>
    /**
     * Filter which events to update
     */
    where?: eventWhereInput
  }


  /**
   * event upsert
   */
  export type eventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event
     */
    select?: eventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: eventInclude<ExtArgs> | null
    /**
     * The filter to search for the event to update in case it exists.
     */
    where: eventWhereUniqueInput
    /**
     * In case the event found by the `where` argument doesn't exist, create a new event with this data.
     */
    create: XOR<eventCreateInput, eventUncheckedCreateInput>
    /**
     * In case the event was found with the provided `where` argument, update it with this data.
     */
    update: XOR<eventUpdateInput, eventUncheckedUpdateInput>
  }


  /**
   * event delete
   */
  export type eventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event
     */
    select?: eventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: eventInclude<ExtArgs> | null
    /**
     * Filter which event to delete.
     */
    where: eventWhereUniqueInput
  }


  /**
   * event deleteMany
   */
  export type eventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which events to delete
     */
    where?: eventWhereInput
  }


  /**
   * event.user
   */
  export type event$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    where?: userWhereInput
  }


  /**
   * event.user_registered
   */
  export type event$user_registeredArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_registered
     */
    select?: user_registeredSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_registeredInclude<ExtArgs> | null
    where?: user_registeredWhereInput
    orderBy?: user_registeredOrderByWithRelationInput | user_registeredOrderByWithRelationInput[]
    cursor?: user_registeredWhereUniqueInput
    take?: number
    skip?: number
    distinct?: User_registeredScalarFieldEnum | User_registeredScalarFieldEnum[]
  }


  /**
   * event without action
   */
  export type eventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event
     */
    select?: eventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: eventInclude<ExtArgs> | null
  }



  /**
   * Model user
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    nim: string | null
    nama_depan: string | null
    nama_belakang: string | null
    email: string | null
    phone: string | null
    password: string | null
    fakultas: string | null
    program_studi: string | null
    gender: $Enums.user_gender | null
    created_at: Date | null
  }

  export type UserMaxAggregateOutputType = {
    nim: string | null
    nama_depan: string | null
    nama_belakang: string | null
    email: string | null
    phone: string | null
    password: string | null
    fakultas: string | null
    program_studi: string | null
    gender: $Enums.user_gender | null
    created_at: Date | null
  }

  export type UserCountAggregateOutputType = {
    nim: number
    nama_depan: number
    nama_belakang: number
    email: number
    phone: number
    password: number
    fakultas: number
    program_studi: number
    gender: number
    created_at: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    nim?: true
    nama_depan?: true
    nama_belakang?: true
    email?: true
    phone?: true
    password?: true
    fakultas?: true
    program_studi?: true
    gender?: true
    created_at?: true
  }

  export type UserMaxAggregateInputType = {
    nim?: true
    nama_depan?: true
    nama_belakang?: true
    email?: true
    phone?: true
    password?: true
    fakultas?: true
    program_studi?: true
    gender?: true
    created_at?: true
  }

  export type UserCountAggregateInputType = {
    nim?: true
    nama_depan?: true
    nama_belakang?: true
    email?: true
    phone?: true
    password?: true
    fakultas?: true
    program_studi?: true
    gender?: true
    created_at?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user to aggregate.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type userGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userWhereInput
    orderBy?: userOrderByWithAggregationInput | userOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    nim: string
    nama_depan: string | null
    nama_belakang: string | null
    email: string
    phone: string
    password: string
    fakultas: string
    program_studi: string
    gender: $Enums.user_gender
    created_at: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends userGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    nim?: boolean
    nama_depan?: boolean
    nama_belakang?: boolean
    email?: boolean
    phone?: boolean
    password?: boolean
    fakultas?: boolean
    program_studi?: boolean
    gender?: boolean
    created_at?: boolean
    event?: boolean | user$eventArgs<ExtArgs>
    user_registered?: boolean | user$user_registeredArgs<ExtArgs>
    user_session?: boolean | user$user_sessionArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type userSelectScalar = {
    nim?: boolean
    nama_depan?: boolean
    nama_belakang?: boolean
    email?: boolean
    phone?: boolean
    password?: boolean
    fakultas?: boolean
    program_studi?: boolean
    gender?: boolean
    created_at?: boolean
  }

  export type userInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | user$eventArgs<ExtArgs>
    user_registered?: boolean | user$user_registeredArgs<ExtArgs>
    user_session?: boolean | user$user_sessionArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $userPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user"
    objects: {
      event: Prisma.$eventPayload<ExtArgs>[]
      user_registered: Prisma.$user_registeredPayload<ExtArgs>[]
      user_session: Prisma.$user_sessionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      nim: string
      nama_depan: string | null
      nama_belakang: string | null
      email: string
      phone: string
      password: string
      fakultas: string
      program_studi: string
      gender: $Enums.user_gender
      created_at: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type userGetPayload<S extends boolean | null | undefined | userDefaultArgs> = $Result.GetResult<Prisma.$userPayload, S>

  type userCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<userFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface userDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user'], meta: { name: 'user' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, userFindUniqueArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {userFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends userFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindFirstArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends userFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `nim`
     * const userWithNimOnly = await prisma.user.findMany({ select: { nim: true } })
     * 
    **/
    findMany<T extends userFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends userCreateArgs<ExtArgs>>(
      args: SelectSubset<T, userCreateArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {userCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends userCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends userDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, userDeleteArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, userUpdateArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, userUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends userUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, userUpsertArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userGroupByArgs['orderBy'] }
        : { orderBy?: userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user model
   */
  readonly fields: userFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__userClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    event<T extends user$eventArgs<ExtArgs> = {}>(args?: Subset<T, user$eventArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$eventPayload<ExtArgs>, T, 'findMany'> | Null>;

    user_registered<T extends user$user_registeredArgs<ExtArgs> = {}>(args?: Subset<T, user$user_registeredArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_registeredPayload<ExtArgs>, T, 'findMany'> | Null>;

    user_session<T extends user$user_sessionArgs<ExtArgs> = {}>(args?: Subset<T, user$user_sessionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_sessionPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the user model
   */ 
  interface userFieldRefs {
    readonly nim: FieldRef<"user", 'String'>
    readonly nama_depan: FieldRef<"user", 'String'>
    readonly nama_belakang: FieldRef<"user", 'String'>
    readonly email: FieldRef<"user", 'String'>
    readonly phone: FieldRef<"user", 'String'>
    readonly password: FieldRef<"user", 'String'>
    readonly fakultas: FieldRef<"user", 'String'>
    readonly program_studi: FieldRef<"user", 'String'>
    readonly gender: FieldRef<"user", 'user_gender'>
    readonly created_at: FieldRef<"user", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * user findUnique
   */
  export type userFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }


  /**
   * user findUniqueOrThrow
   */
  export type userFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }


  /**
   * user findFirst
   */
  export type userFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * user findFirstOrThrow
   */
  export type userFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * user findMany
   */
  export type userFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * user create
   */
  export type userCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to create a user.
     */
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }


  /**
   * user createMany
   */
  export type userCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: userCreateManyInput | userCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * user update
   */
  export type userUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to update a user.
     */
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     */
    where: userWhereUniqueInput
  }


  /**
   * user updateMany
   */
  export type userUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: userWhereInput
  }


  /**
   * user upsert
   */
  export type userUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The filter to search for the user to update in case it exists.
     */
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     */
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }


  /**
   * user delete
   */
  export type userDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter which user to delete.
     */
    where: userWhereUniqueInput
  }


  /**
   * user deleteMany
   */
  export type userDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: userWhereInput
  }


  /**
   * user.event
   */
  export type user$eventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event
     */
    select?: eventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: eventInclude<ExtArgs> | null
    where?: eventWhereInput
    orderBy?: eventOrderByWithRelationInput | eventOrderByWithRelationInput[]
    cursor?: eventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }


  /**
   * user.user_registered
   */
  export type user$user_registeredArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_registered
     */
    select?: user_registeredSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_registeredInclude<ExtArgs> | null
    where?: user_registeredWhereInput
    orderBy?: user_registeredOrderByWithRelationInput | user_registeredOrderByWithRelationInput[]
    cursor?: user_registeredWhereUniqueInput
    take?: number
    skip?: number
    distinct?: User_registeredScalarFieldEnum | User_registeredScalarFieldEnum[]
  }


  /**
   * user.user_session
   */
  export type user$user_sessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_session
     */
    select?: user_sessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_sessionInclude<ExtArgs> | null
    where?: user_sessionWhereInput
    orderBy?: user_sessionOrderByWithRelationInput | user_sessionOrderByWithRelationInput[]
    cursor?: user_sessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: User_sessionScalarFieldEnum | User_sessionScalarFieldEnum[]
  }


  /**
   * user without action
   */
  export type userDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
  }



  /**
   * Model user_registered
   */

  export type AggregateUser_registered = {
    _count: User_registeredCountAggregateOutputType | null
    _avg: User_registeredAvgAggregateOutputType | null
    _sum: User_registeredSumAggregateOutputType | null
    _min: User_registeredMinAggregateOutputType | null
    _max: User_registeredMaxAggregateOutputType | null
  }

  export type User_registeredAvgAggregateOutputType = {
    id: number | null
    event_id: number | null
  }

  export type User_registeredSumAggregateOutputType = {
    id: number | null
    event_id: number | null
  }

  export type User_registeredMinAggregateOutputType = {
    id: number | null
    user_nim: string | null
    event_id: number | null
    alasan_join: string | null
    cv: string | null
    created_at: Date | null
    divisi: string | null
    status: $Enums.usreg_status | null
    jabatan: string | null
  }

  export type User_registeredMaxAggregateOutputType = {
    id: number | null
    user_nim: string | null
    event_id: number | null
    alasan_join: string | null
    cv: string | null
    created_at: Date | null
    divisi: string | null
    status: $Enums.usreg_status | null
    jabatan: string | null
  }

  export type User_registeredCountAggregateOutputType = {
    id: number
    user_nim: number
    event_id: number
    alasan_join: number
    cv: number
    created_at: number
    divisi: number
    status: number
    jabatan: number
    _all: number
  }


  export type User_registeredAvgAggregateInputType = {
    id?: true
    event_id?: true
  }

  export type User_registeredSumAggregateInputType = {
    id?: true
    event_id?: true
  }

  export type User_registeredMinAggregateInputType = {
    id?: true
    user_nim?: true
    event_id?: true
    alasan_join?: true
    cv?: true
    created_at?: true
    divisi?: true
    status?: true
    jabatan?: true
  }

  export type User_registeredMaxAggregateInputType = {
    id?: true
    user_nim?: true
    event_id?: true
    alasan_join?: true
    cv?: true
    created_at?: true
    divisi?: true
    status?: true
    jabatan?: true
  }

  export type User_registeredCountAggregateInputType = {
    id?: true
    user_nim?: true
    event_id?: true
    alasan_join?: true
    cv?: true
    created_at?: true
    divisi?: true
    status?: true
    jabatan?: true
    _all?: true
  }

  export type User_registeredAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_registered to aggregate.
     */
    where?: user_registeredWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_registereds to fetch.
     */
    orderBy?: user_registeredOrderByWithRelationInput | user_registeredOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: user_registeredWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_registereds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_registereds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned user_registereds
    **/
    _count?: true | User_registeredCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: User_registeredAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: User_registeredSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_registeredMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_registeredMaxAggregateInputType
  }

  export type GetUser_registeredAggregateType<T extends User_registeredAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_registered]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_registered[P]>
      : GetScalarType<T[P], AggregateUser_registered[P]>
  }




  export type user_registeredGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_registeredWhereInput
    orderBy?: user_registeredOrderByWithAggregationInput | user_registeredOrderByWithAggregationInput[]
    by: User_registeredScalarFieldEnum[] | User_registeredScalarFieldEnum
    having?: user_registeredScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_registeredCountAggregateInputType | true
    _avg?: User_registeredAvgAggregateInputType
    _sum?: User_registeredSumAggregateInputType
    _min?: User_registeredMinAggregateInputType
    _max?: User_registeredMaxAggregateInputType
  }

  export type User_registeredGroupByOutputType = {
    id: number
    user_nim: string | null
    event_id: number | null
    alasan_join: string | null
    cv: string | null
    created_at: Date
    divisi: string | null
    status: $Enums.usreg_status | null
    jabatan: string | null
    _count: User_registeredCountAggregateOutputType | null
    _avg: User_registeredAvgAggregateOutputType | null
    _sum: User_registeredSumAggregateOutputType | null
    _min: User_registeredMinAggregateOutputType | null
    _max: User_registeredMaxAggregateOutputType | null
  }

  type GetUser_registeredGroupByPayload<T extends user_registeredGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<User_registeredGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_registeredGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_registeredGroupByOutputType[P]>
            : GetScalarType<T[P], User_registeredGroupByOutputType[P]>
        }
      >
    >


  export type user_registeredSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_nim?: boolean
    event_id?: boolean
    alasan_join?: boolean
    cv?: boolean
    created_at?: boolean
    divisi?: boolean
    status?: boolean
    jabatan?: boolean
    user?: boolean | user_registered$userArgs<ExtArgs>
    event?: boolean | user_registered$eventArgs<ExtArgs>
  }, ExtArgs["result"]["user_registered"]>

  export type user_registeredSelectScalar = {
    id?: boolean
    user_nim?: boolean
    event_id?: boolean
    alasan_join?: boolean
    cv?: boolean
    created_at?: boolean
    divisi?: boolean
    status?: boolean
    jabatan?: boolean
  }

  export type user_registeredInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | user_registered$userArgs<ExtArgs>
    event?: boolean | user_registered$eventArgs<ExtArgs>
  }


  export type $user_registeredPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user_registered"
    objects: {
      user: Prisma.$userPayload<ExtArgs> | null
      event: Prisma.$eventPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_nim: string | null
      event_id: number | null
      alasan_join: string | null
      cv: string | null
      created_at: Date
      divisi: string | null
      status: $Enums.usreg_status | null
      jabatan: string | null
    }, ExtArgs["result"]["user_registered"]>
    composites: {}
  }


  type user_registeredGetPayload<S extends boolean | null | undefined | user_registeredDefaultArgs> = $Result.GetResult<Prisma.$user_registeredPayload, S>

  type user_registeredCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<user_registeredFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: User_registeredCountAggregateInputType | true
    }

  export interface user_registeredDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user_registered'], meta: { name: 'user_registered' } }
    /**
     * Find zero or one User_registered that matches the filter.
     * @param {user_registeredFindUniqueArgs} args - Arguments to find a User_registered
     * @example
     * // Get one User_registered
     * const user_registered = await prisma.user_registered.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends user_registeredFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, user_registeredFindUniqueArgs<ExtArgs>>
    ): Prisma__user_registeredClient<$Result.GetResult<Prisma.$user_registeredPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User_registered that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {user_registeredFindUniqueOrThrowArgs} args - Arguments to find a User_registered
     * @example
     * // Get one User_registered
     * const user_registered = await prisma.user_registered.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends user_registeredFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, user_registeredFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__user_registeredClient<$Result.GetResult<Prisma.$user_registeredPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User_registered that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_registeredFindFirstArgs} args - Arguments to find a User_registered
     * @example
     * // Get one User_registered
     * const user_registered = await prisma.user_registered.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends user_registeredFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, user_registeredFindFirstArgs<ExtArgs>>
    ): Prisma__user_registeredClient<$Result.GetResult<Prisma.$user_registeredPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User_registered that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_registeredFindFirstOrThrowArgs} args - Arguments to find a User_registered
     * @example
     * // Get one User_registered
     * const user_registered = await prisma.user_registered.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends user_registeredFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, user_registeredFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__user_registeredClient<$Result.GetResult<Prisma.$user_registeredPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more User_registereds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_registeredFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_registereds
     * const user_registereds = await prisma.user_registered.findMany()
     * 
     * // Get first 10 User_registereds
     * const user_registereds = await prisma.user_registered.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const user_registeredWithIdOnly = await prisma.user_registered.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends user_registeredFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, user_registeredFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_registeredPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User_registered.
     * @param {user_registeredCreateArgs} args - Arguments to create a User_registered.
     * @example
     * // Create one User_registered
     * const User_registered = await prisma.user_registered.create({
     *   data: {
     *     // ... data to create a User_registered
     *   }
     * })
     * 
    **/
    create<T extends user_registeredCreateArgs<ExtArgs>>(
      args: SelectSubset<T, user_registeredCreateArgs<ExtArgs>>
    ): Prisma__user_registeredClient<$Result.GetResult<Prisma.$user_registeredPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many User_registereds.
     *     @param {user_registeredCreateManyArgs} args - Arguments to create many User_registereds.
     *     @example
     *     // Create many User_registereds
     *     const user_registered = await prisma.user_registered.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends user_registeredCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, user_registeredCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User_registered.
     * @param {user_registeredDeleteArgs} args - Arguments to delete one User_registered.
     * @example
     * // Delete one User_registered
     * const User_registered = await prisma.user_registered.delete({
     *   where: {
     *     // ... filter to delete one User_registered
     *   }
     * })
     * 
    **/
    delete<T extends user_registeredDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, user_registeredDeleteArgs<ExtArgs>>
    ): Prisma__user_registeredClient<$Result.GetResult<Prisma.$user_registeredPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User_registered.
     * @param {user_registeredUpdateArgs} args - Arguments to update one User_registered.
     * @example
     * // Update one User_registered
     * const user_registered = await prisma.user_registered.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends user_registeredUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, user_registeredUpdateArgs<ExtArgs>>
    ): Prisma__user_registeredClient<$Result.GetResult<Prisma.$user_registeredPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more User_registereds.
     * @param {user_registeredDeleteManyArgs} args - Arguments to filter User_registereds to delete.
     * @example
     * // Delete a few User_registereds
     * const { count } = await prisma.user_registered.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends user_registeredDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, user_registeredDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_registereds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_registeredUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_registereds
     * const user_registered = await prisma.user_registered.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends user_registeredUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, user_registeredUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User_registered.
     * @param {user_registeredUpsertArgs} args - Arguments to update or create a User_registered.
     * @example
     * // Update or create a User_registered
     * const user_registered = await prisma.user_registered.upsert({
     *   create: {
     *     // ... data to create a User_registered
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_registered we want to update
     *   }
     * })
    **/
    upsert<T extends user_registeredUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, user_registeredUpsertArgs<ExtArgs>>
    ): Prisma__user_registeredClient<$Result.GetResult<Prisma.$user_registeredPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of User_registereds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_registeredCountArgs} args - Arguments to filter User_registereds to count.
     * @example
     * // Count the number of User_registereds
     * const count = await prisma.user_registered.count({
     *   where: {
     *     // ... the filter for the User_registereds we want to count
     *   }
     * })
    **/
    count<T extends user_registeredCountArgs>(
      args?: Subset<T, user_registeredCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_registeredCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_registered.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_registeredAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_registeredAggregateArgs>(args: Subset<T, User_registeredAggregateArgs>): Prisma.PrismaPromise<GetUser_registeredAggregateType<T>>

    /**
     * Group by User_registered.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_registeredGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends user_registeredGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: user_registeredGroupByArgs['orderBy'] }
        : { orderBy?: user_registeredGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, user_registeredGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_registeredGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user_registered model
   */
  readonly fields: user_registeredFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user_registered.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__user_registeredClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends user_registered$userArgs<ExtArgs> = {}>(args?: Subset<T, user_registered$userArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    event<T extends user_registered$eventArgs<ExtArgs> = {}>(args?: Subset<T, user_registered$eventArgs<ExtArgs>>): Prisma__eventClient<$Result.GetResult<Prisma.$eventPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the user_registered model
   */ 
  interface user_registeredFieldRefs {
    readonly id: FieldRef<"user_registered", 'Int'>
    readonly user_nim: FieldRef<"user_registered", 'String'>
    readonly event_id: FieldRef<"user_registered", 'Int'>
    readonly alasan_join: FieldRef<"user_registered", 'String'>
    readonly cv: FieldRef<"user_registered", 'String'>
    readonly created_at: FieldRef<"user_registered", 'DateTime'>
    readonly divisi: FieldRef<"user_registered", 'String'>
    readonly status: FieldRef<"user_registered", 'usreg_status'>
    readonly jabatan: FieldRef<"user_registered", 'String'>
  }
    

  // Custom InputTypes

  /**
   * user_registered findUnique
   */
  export type user_registeredFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_registered
     */
    select?: user_registeredSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_registeredInclude<ExtArgs> | null
    /**
     * Filter, which user_registered to fetch.
     */
    where: user_registeredWhereUniqueInput
  }


  /**
   * user_registered findUniqueOrThrow
   */
  export type user_registeredFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_registered
     */
    select?: user_registeredSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_registeredInclude<ExtArgs> | null
    /**
     * Filter, which user_registered to fetch.
     */
    where: user_registeredWhereUniqueInput
  }


  /**
   * user_registered findFirst
   */
  export type user_registeredFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_registered
     */
    select?: user_registeredSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_registeredInclude<ExtArgs> | null
    /**
     * Filter, which user_registered to fetch.
     */
    where?: user_registeredWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_registereds to fetch.
     */
    orderBy?: user_registeredOrderByWithRelationInput | user_registeredOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_registereds.
     */
    cursor?: user_registeredWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_registereds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_registereds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_registereds.
     */
    distinct?: User_registeredScalarFieldEnum | User_registeredScalarFieldEnum[]
  }


  /**
   * user_registered findFirstOrThrow
   */
  export type user_registeredFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_registered
     */
    select?: user_registeredSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_registeredInclude<ExtArgs> | null
    /**
     * Filter, which user_registered to fetch.
     */
    where?: user_registeredWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_registereds to fetch.
     */
    orderBy?: user_registeredOrderByWithRelationInput | user_registeredOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_registereds.
     */
    cursor?: user_registeredWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_registereds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_registereds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_registereds.
     */
    distinct?: User_registeredScalarFieldEnum | User_registeredScalarFieldEnum[]
  }


  /**
   * user_registered findMany
   */
  export type user_registeredFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_registered
     */
    select?: user_registeredSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_registeredInclude<ExtArgs> | null
    /**
     * Filter, which user_registereds to fetch.
     */
    where?: user_registeredWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_registereds to fetch.
     */
    orderBy?: user_registeredOrderByWithRelationInput | user_registeredOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing user_registereds.
     */
    cursor?: user_registeredWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_registereds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_registereds.
     */
    skip?: number
    distinct?: User_registeredScalarFieldEnum | User_registeredScalarFieldEnum[]
  }


  /**
   * user_registered create
   */
  export type user_registeredCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_registered
     */
    select?: user_registeredSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_registeredInclude<ExtArgs> | null
    /**
     * The data needed to create a user_registered.
     */
    data?: XOR<user_registeredCreateInput, user_registeredUncheckedCreateInput>
  }


  /**
   * user_registered createMany
   */
  export type user_registeredCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many user_registereds.
     */
    data: user_registeredCreateManyInput | user_registeredCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * user_registered update
   */
  export type user_registeredUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_registered
     */
    select?: user_registeredSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_registeredInclude<ExtArgs> | null
    /**
     * The data needed to update a user_registered.
     */
    data: XOR<user_registeredUpdateInput, user_registeredUncheckedUpdateInput>
    /**
     * Choose, which user_registered to update.
     */
    where: user_registeredWhereUniqueInput
  }


  /**
   * user_registered updateMany
   */
  export type user_registeredUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update user_registereds.
     */
    data: XOR<user_registeredUpdateManyMutationInput, user_registeredUncheckedUpdateManyInput>
    /**
     * Filter which user_registereds to update
     */
    where?: user_registeredWhereInput
  }


  /**
   * user_registered upsert
   */
  export type user_registeredUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_registered
     */
    select?: user_registeredSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_registeredInclude<ExtArgs> | null
    /**
     * The filter to search for the user_registered to update in case it exists.
     */
    where: user_registeredWhereUniqueInput
    /**
     * In case the user_registered found by the `where` argument doesn't exist, create a new user_registered with this data.
     */
    create: XOR<user_registeredCreateInput, user_registeredUncheckedCreateInput>
    /**
     * In case the user_registered was found with the provided `where` argument, update it with this data.
     */
    update: XOR<user_registeredUpdateInput, user_registeredUncheckedUpdateInput>
  }


  /**
   * user_registered delete
   */
  export type user_registeredDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_registered
     */
    select?: user_registeredSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_registeredInclude<ExtArgs> | null
    /**
     * Filter which user_registered to delete.
     */
    where: user_registeredWhereUniqueInput
  }


  /**
   * user_registered deleteMany
   */
  export type user_registeredDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_registereds to delete
     */
    where?: user_registeredWhereInput
  }


  /**
   * user_registered.user
   */
  export type user_registered$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    where?: userWhereInput
  }


  /**
   * user_registered.event
   */
  export type user_registered$eventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event
     */
    select?: eventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: eventInclude<ExtArgs> | null
    where?: eventWhereInput
  }


  /**
   * user_registered without action
   */
  export type user_registeredDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_registered
     */
    select?: user_registeredSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_registeredInclude<ExtArgs> | null
  }



  /**
   * Model admin_session
   */

  export type AggregateAdmin_session = {
    _count: Admin_sessionCountAggregateOutputType | null
    _avg: Admin_sessionAvgAggregateOutputType | null
    _sum: Admin_sessionSumAggregateOutputType | null
    _min: Admin_sessionMinAggregateOutputType | null
    _max: Admin_sessionMaxAggregateOutputType | null
  }

  export type Admin_sessionAvgAggregateOutputType = {
    admin_id: number | null
  }

  export type Admin_sessionSumAggregateOutputType = {
    admin_id: number | null
  }

  export type Admin_sessionMinAggregateOutputType = {
    id: string | null
    admin_id: number | null
  }

  export type Admin_sessionMaxAggregateOutputType = {
    id: string | null
    admin_id: number | null
  }

  export type Admin_sessionCountAggregateOutputType = {
    id: number
    admin_id: number
    _all: number
  }


  export type Admin_sessionAvgAggregateInputType = {
    admin_id?: true
  }

  export type Admin_sessionSumAggregateInputType = {
    admin_id?: true
  }

  export type Admin_sessionMinAggregateInputType = {
    id?: true
    admin_id?: true
  }

  export type Admin_sessionMaxAggregateInputType = {
    id?: true
    admin_id?: true
  }

  export type Admin_sessionCountAggregateInputType = {
    id?: true
    admin_id?: true
    _all?: true
  }

  export type Admin_sessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which admin_session to aggregate.
     */
    where?: admin_sessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of admin_sessions to fetch.
     */
    orderBy?: admin_sessionOrderByWithRelationInput | admin_sessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: admin_sessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` admin_sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` admin_sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned admin_sessions
    **/
    _count?: true | Admin_sessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Admin_sessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Admin_sessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Admin_sessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Admin_sessionMaxAggregateInputType
  }

  export type GetAdmin_sessionAggregateType<T extends Admin_sessionAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin_session]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin_session[P]>
      : GetScalarType<T[P], AggregateAdmin_session[P]>
  }




  export type admin_sessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: admin_sessionWhereInput
    orderBy?: admin_sessionOrderByWithAggregationInput | admin_sessionOrderByWithAggregationInput[]
    by: Admin_sessionScalarFieldEnum[] | Admin_sessionScalarFieldEnum
    having?: admin_sessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Admin_sessionCountAggregateInputType | true
    _avg?: Admin_sessionAvgAggregateInputType
    _sum?: Admin_sessionSumAggregateInputType
    _min?: Admin_sessionMinAggregateInputType
    _max?: Admin_sessionMaxAggregateInputType
  }

  export type Admin_sessionGroupByOutputType = {
    id: string
    admin_id: number | null
    _count: Admin_sessionCountAggregateOutputType | null
    _avg: Admin_sessionAvgAggregateOutputType | null
    _sum: Admin_sessionSumAggregateOutputType | null
    _min: Admin_sessionMinAggregateOutputType | null
    _max: Admin_sessionMaxAggregateOutputType | null
  }

  type GetAdmin_sessionGroupByPayload<T extends admin_sessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Admin_sessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Admin_sessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Admin_sessionGroupByOutputType[P]>
            : GetScalarType<T[P], Admin_sessionGroupByOutputType[P]>
        }
      >
    >


  export type admin_sessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    admin_id?: boolean
    admin?: boolean | admin_session$adminArgs<ExtArgs>
  }, ExtArgs["result"]["admin_session"]>

  export type admin_sessionSelectScalar = {
    id?: boolean
    admin_id?: boolean
  }

  export type admin_sessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | admin_session$adminArgs<ExtArgs>
  }


  export type $admin_sessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "admin_session"
    objects: {
      admin: Prisma.$adminPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      admin_id: number | null
    }, ExtArgs["result"]["admin_session"]>
    composites: {}
  }


  type admin_sessionGetPayload<S extends boolean | null | undefined | admin_sessionDefaultArgs> = $Result.GetResult<Prisma.$admin_sessionPayload, S>

  type admin_sessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<admin_sessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Admin_sessionCountAggregateInputType | true
    }

  export interface admin_sessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['admin_session'], meta: { name: 'admin_session' } }
    /**
     * Find zero or one Admin_session that matches the filter.
     * @param {admin_sessionFindUniqueArgs} args - Arguments to find a Admin_session
     * @example
     * // Get one Admin_session
     * const admin_session = await prisma.admin_session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends admin_sessionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, admin_sessionFindUniqueArgs<ExtArgs>>
    ): Prisma__admin_sessionClient<$Result.GetResult<Prisma.$admin_sessionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Admin_session that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {admin_sessionFindUniqueOrThrowArgs} args - Arguments to find a Admin_session
     * @example
     * // Get one Admin_session
     * const admin_session = await prisma.admin_session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends admin_sessionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, admin_sessionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__admin_sessionClient<$Result.GetResult<Prisma.$admin_sessionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Admin_session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {admin_sessionFindFirstArgs} args - Arguments to find a Admin_session
     * @example
     * // Get one Admin_session
     * const admin_session = await prisma.admin_session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends admin_sessionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, admin_sessionFindFirstArgs<ExtArgs>>
    ): Prisma__admin_sessionClient<$Result.GetResult<Prisma.$admin_sessionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Admin_session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {admin_sessionFindFirstOrThrowArgs} args - Arguments to find a Admin_session
     * @example
     * // Get one Admin_session
     * const admin_session = await prisma.admin_session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends admin_sessionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, admin_sessionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__admin_sessionClient<$Result.GetResult<Prisma.$admin_sessionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Admin_sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {admin_sessionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admin_sessions
     * const admin_sessions = await prisma.admin_session.findMany()
     * 
     * // Get first 10 Admin_sessions
     * const admin_sessions = await prisma.admin_session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const admin_sessionWithIdOnly = await prisma.admin_session.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends admin_sessionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, admin_sessionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$admin_sessionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Admin_session.
     * @param {admin_sessionCreateArgs} args - Arguments to create a Admin_session.
     * @example
     * // Create one Admin_session
     * const Admin_session = await prisma.admin_session.create({
     *   data: {
     *     // ... data to create a Admin_session
     *   }
     * })
     * 
    **/
    create<T extends admin_sessionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, admin_sessionCreateArgs<ExtArgs>>
    ): Prisma__admin_sessionClient<$Result.GetResult<Prisma.$admin_sessionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Admin_sessions.
     *     @param {admin_sessionCreateManyArgs} args - Arguments to create many Admin_sessions.
     *     @example
     *     // Create many Admin_sessions
     *     const admin_session = await prisma.admin_session.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends admin_sessionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, admin_sessionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Admin_session.
     * @param {admin_sessionDeleteArgs} args - Arguments to delete one Admin_session.
     * @example
     * // Delete one Admin_session
     * const Admin_session = await prisma.admin_session.delete({
     *   where: {
     *     // ... filter to delete one Admin_session
     *   }
     * })
     * 
    **/
    delete<T extends admin_sessionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, admin_sessionDeleteArgs<ExtArgs>>
    ): Prisma__admin_sessionClient<$Result.GetResult<Prisma.$admin_sessionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Admin_session.
     * @param {admin_sessionUpdateArgs} args - Arguments to update one Admin_session.
     * @example
     * // Update one Admin_session
     * const admin_session = await prisma.admin_session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends admin_sessionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, admin_sessionUpdateArgs<ExtArgs>>
    ): Prisma__admin_sessionClient<$Result.GetResult<Prisma.$admin_sessionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Admin_sessions.
     * @param {admin_sessionDeleteManyArgs} args - Arguments to filter Admin_sessions to delete.
     * @example
     * // Delete a few Admin_sessions
     * const { count } = await prisma.admin_session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends admin_sessionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, admin_sessionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admin_sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {admin_sessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admin_sessions
     * const admin_session = await prisma.admin_session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends admin_sessionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, admin_sessionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Admin_session.
     * @param {admin_sessionUpsertArgs} args - Arguments to update or create a Admin_session.
     * @example
     * // Update or create a Admin_session
     * const admin_session = await prisma.admin_session.upsert({
     *   create: {
     *     // ... data to create a Admin_session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin_session we want to update
     *   }
     * })
    **/
    upsert<T extends admin_sessionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, admin_sessionUpsertArgs<ExtArgs>>
    ): Prisma__admin_sessionClient<$Result.GetResult<Prisma.$admin_sessionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Admin_sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {admin_sessionCountArgs} args - Arguments to filter Admin_sessions to count.
     * @example
     * // Count the number of Admin_sessions
     * const count = await prisma.admin_session.count({
     *   where: {
     *     // ... the filter for the Admin_sessions we want to count
     *   }
     * })
    **/
    count<T extends admin_sessionCountArgs>(
      args?: Subset<T, admin_sessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Admin_sessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin_session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Admin_sessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Admin_sessionAggregateArgs>(args: Subset<T, Admin_sessionAggregateArgs>): Prisma.PrismaPromise<GetAdmin_sessionAggregateType<T>>

    /**
     * Group by Admin_session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {admin_sessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends admin_sessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: admin_sessionGroupByArgs['orderBy'] }
        : { orderBy?: admin_sessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, admin_sessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdmin_sessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the admin_session model
   */
  readonly fields: admin_sessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for admin_session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__admin_sessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    admin<T extends admin_session$adminArgs<ExtArgs> = {}>(args?: Subset<T, admin_session$adminArgs<ExtArgs>>): Prisma__adminClient<$Result.GetResult<Prisma.$adminPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the admin_session model
   */ 
  interface admin_sessionFieldRefs {
    readonly id: FieldRef<"admin_session", 'String'>
    readonly admin_id: FieldRef<"admin_session", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * admin_session findUnique
   */
  export type admin_sessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin_session
     */
    select?: admin_sessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: admin_sessionInclude<ExtArgs> | null
    /**
     * Filter, which admin_session to fetch.
     */
    where: admin_sessionWhereUniqueInput
  }


  /**
   * admin_session findUniqueOrThrow
   */
  export type admin_sessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin_session
     */
    select?: admin_sessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: admin_sessionInclude<ExtArgs> | null
    /**
     * Filter, which admin_session to fetch.
     */
    where: admin_sessionWhereUniqueInput
  }


  /**
   * admin_session findFirst
   */
  export type admin_sessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin_session
     */
    select?: admin_sessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: admin_sessionInclude<ExtArgs> | null
    /**
     * Filter, which admin_session to fetch.
     */
    where?: admin_sessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of admin_sessions to fetch.
     */
    orderBy?: admin_sessionOrderByWithRelationInput | admin_sessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for admin_sessions.
     */
    cursor?: admin_sessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` admin_sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` admin_sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of admin_sessions.
     */
    distinct?: Admin_sessionScalarFieldEnum | Admin_sessionScalarFieldEnum[]
  }


  /**
   * admin_session findFirstOrThrow
   */
  export type admin_sessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin_session
     */
    select?: admin_sessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: admin_sessionInclude<ExtArgs> | null
    /**
     * Filter, which admin_session to fetch.
     */
    where?: admin_sessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of admin_sessions to fetch.
     */
    orderBy?: admin_sessionOrderByWithRelationInput | admin_sessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for admin_sessions.
     */
    cursor?: admin_sessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` admin_sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` admin_sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of admin_sessions.
     */
    distinct?: Admin_sessionScalarFieldEnum | Admin_sessionScalarFieldEnum[]
  }


  /**
   * admin_session findMany
   */
  export type admin_sessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin_session
     */
    select?: admin_sessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: admin_sessionInclude<ExtArgs> | null
    /**
     * Filter, which admin_sessions to fetch.
     */
    where?: admin_sessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of admin_sessions to fetch.
     */
    orderBy?: admin_sessionOrderByWithRelationInput | admin_sessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing admin_sessions.
     */
    cursor?: admin_sessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` admin_sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` admin_sessions.
     */
    skip?: number
    distinct?: Admin_sessionScalarFieldEnum | Admin_sessionScalarFieldEnum[]
  }


  /**
   * admin_session create
   */
  export type admin_sessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin_session
     */
    select?: admin_sessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: admin_sessionInclude<ExtArgs> | null
    /**
     * The data needed to create a admin_session.
     */
    data: XOR<admin_sessionCreateInput, admin_sessionUncheckedCreateInput>
  }


  /**
   * admin_session createMany
   */
  export type admin_sessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many admin_sessions.
     */
    data: admin_sessionCreateManyInput | admin_sessionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * admin_session update
   */
  export type admin_sessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin_session
     */
    select?: admin_sessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: admin_sessionInclude<ExtArgs> | null
    /**
     * The data needed to update a admin_session.
     */
    data: XOR<admin_sessionUpdateInput, admin_sessionUncheckedUpdateInput>
    /**
     * Choose, which admin_session to update.
     */
    where: admin_sessionWhereUniqueInput
  }


  /**
   * admin_session updateMany
   */
  export type admin_sessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update admin_sessions.
     */
    data: XOR<admin_sessionUpdateManyMutationInput, admin_sessionUncheckedUpdateManyInput>
    /**
     * Filter which admin_sessions to update
     */
    where?: admin_sessionWhereInput
  }


  /**
   * admin_session upsert
   */
  export type admin_sessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin_session
     */
    select?: admin_sessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: admin_sessionInclude<ExtArgs> | null
    /**
     * The filter to search for the admin_session to update in case it exists.
     */
    where: admin_sessionWhereUniqueInput
    /**
     * In case the admin_session found by the `where` argument doesn't exist, create a new admin_session with this data.
     */
    create: XOR<admin_sessionCreateInput, admin_sessionUncheckedCreateInput>
    /**
     * In case the admin_session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<admin_sessionUpdateInput, admin_sessionUncheckedUpdateInput>
  }


  /**
   * admin_session delete
   */
  export type admin_sessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin_session
     */
    select?: admin_sessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: admin_sessionInclude<ExtArgs> | null
    /**
     * Filter which admin_session to delete.
     */
    where: admin_sessionWhereUniqueInput
  }


  /**
   * admin_session deleteMany
   */
  export type admin_sessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which admin_sessions to delete
     */
    where?: admin_sessionWhereInput
  }


  /**
   * admin_session.admin
   */
  export type admin_session$adminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin
     */
    select?: adminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: adminInclude<ExtArgs> | null
    where?: adminWhereInput
  }


  /**
   * admin_session without action
   */
  export type admin_sessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin_session
     */
    select?: admin_sessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: admin_sessionInclude<ExtArgs> | null
  }



  /**
   * Model user_session
   */

  export type AggregateUser_session = {
    _count: User_sessionCountAggregateOutputType | null
    _min: User_sessionMinAggregateOutputType | null
    _max: User_sessionMaxAggregateOutputType | null
  }

  export type User_sessionMinAggregateOutputType = {
    id: string | null
    user_nim: string | null
  }

  export type User_sessionMaxAggregateOutputType = {
    id: string | null
    user_nim: string | null
  }

  export type User_sessionCountAggregateOutputType = {
    id: number
    user_nim: number
    _all: number
  }


  export type User_sessionMinAggregateInputType = {
    id?: true
    user_nim?: true
  }

  export type User_sessionMaxAggregateInputType = {
    id?: true
    user_nim?: true
  }

  export type User_sessionCountAggregateInputType = {
    id?: true
    user_nim?: true
    _all?: true
  }

  export type User_sessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_session to aggregate.
     */
    where?: user_sessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_sessions to fetch.
     */
    orderBy?: user_sessionOrderByWithRelationInput | user_sessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: user_sessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned user_sessions
    **/
    _count?: true | User_sessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_sessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_sessionMaxAggregateInputType
  }

  export type GetUser_sessionAggregateType<T extends User_sessionAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_session]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_session[P]>
      : GetScalarType<T[P], AggregateUser_session[P]>
  }




  export type user_sessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_sessionWhereInput
    orderBy?: user_sessionOrderByWithAggregationInput | user_sessionOrderByWithAggregationInput[]
    by: User_sessionScalarFieldEnum[] | User_sessionScalarFieldEnum
    having?: user_sessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_sessionCountAggregateInputType | true
    _min?: User_sessionMinAggregateInputType
    _max?: User_sessionMaxAggregateInputType
  }

  export type User_sessionGroupByOutputType = {
    id: string
    user_nim: string | null
    _count: User_sessionCountAggregateOutputType | null
    _min: User_sessionMinAggregateOutputType | null
    _max: User_sessionMaxAggregateOutputType | null
  }

  type GetUser_sessionGroupByPayload<T extends user_sessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<User_sessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_sessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_sessionGroupByOutputType[P]>
            : GetScalarType<T[P], User_sessionGroupByOutputType[P]>
        }
      >
    >


  export type user_sessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_nim?: boolean
    user?: boolean | user_session$userArgs<ExtArgs>
  }, ExtArgs["result"]["user_session"]>

  export type user_sessionSelectScalar = {
    id?: boolean
    user_nim?: boolean
  }

  export type user_sessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | user_session$userArgs<ExtArgs>
  }


  export type $user_sessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user_session"
    objects: {
      user: Prisma.$userPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      user_nim: string | null
    }, ExtArgs["result"]["user_session"]>
    composites: {}
  }


  type user_sessionGetPayload<S extends boolean | null | undefined | user_sessionDefaultArgs> = $Result.GetResult<Prisma.$user_sessionPayload, S>

  type user_sessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<user_sessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: User_sessionCountAggregateInputType | true
    }

  export interface user_sessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user_session'], meta: { name: 'user_session' } }
    /**
     * Find zero or one User_session that matches the filter.
     * @param {user_sessionFindUniqueArgs} args - Arguments to find a User_session
     * @example
     * // Get one User_session
     * const user_session = await prisma.user_session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends user_sessionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, user_sessionFindUniqueArgs<ExtArgs>>
    ): Prisma__user_sessionClient<$Result.GetResult<Prisma.$user_sessionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User_session that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {user_sessionFindUniqueOrThrowArgs} args - Arguments to find a User_session
     * @example
     * // Get one User_session
     * const user_session = await prisma.user_session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends user_sessionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, user_sessionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__user_sessionClient<$Result.GetResult<Prisma.$user_sessionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User_session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_sessionFindFirstArgs} args - Arguments to find a User_session
     * @example
     * // Get one User_session
     * const user_session = await prisma.user_session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends user_sessionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, user_sessionFindFirstArgs<ExtArgs>>
    ): Prisma__user_sessionClient<$Result.GetResult<Prisma.$user_sessionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User_session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_sessionFindFirstOrThrowArgs} args - Arguments to find a User_session
     * @example
     * // Get one User_session
     * const user_session = await prisma.user_session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends user_sessionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, user_sessionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__user_sessionClient<$Result.GetResult<Prisma.$user_sessionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more User_sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_sessionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_sessions
     * const user_sessions = await prisma.user_session.findMany()
     * 
     * // Get first 10 User_sessions
     * const user_sessions = await prisma.user_session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const user_sessionWithIdOnly = await prisma.user_session.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends user_sessionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, user_sessionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_sessionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User_session.
     * @param {user_sessionCreateArgs} args - Arguments to create a User_session.
     * @example
     * // Create one User_session
     * const User_session = await prisma.user_session.create({
     *   data: {
     *     // ... data to create a User_session
     *   }
     * })
     * 
    **/
    create<T extends user_sessionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, user_sessionCreateArgs<ExtArgs>>
    ): Prisma__user_sessionClient<$Result.GetResult<Prisma.$user_sessionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many User_sessions.
     *     @param {user_sessionCreateManyArgs} args - Arguments to create many User_sessions.
     *     @example
     *     // Create many User_sessions
     *     const user_session = await prisma.user_session.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends user_sessionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, user_sessionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User_session.
     * @param {user_sessionDeleteArgs} args - Arguments to delete one User_session.
     * @example
     * // Delete one User_session
     * const User_session = await prisma.user_session.delete({
     *   where: {
     *     // ... filter to delete one User_session
     *   }
     * })
     * 
    **/
    delete<T extends user_sessionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, user_sessionDeleteArgs<ExtArgs>>
    ): Prisma__user_sessionClient<$Result.GetResult<Prisma.$user_sessionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User_session.
     * @param {user_sessionUpdateArgs} args - Arguments to update one User_session.
     * @example
     * // Update one User_session
     * const user_session = await prisma.user_session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends user_sessionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, user_sessionUpdateArgs<ExtArgs>>
    ): Prisma__user_sessionClient<$Result.GetResult<Prisma.$user_sessionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more User_sessions.
     * @param {user_sessionDeleteManyArgs} args - Arguments to filter User_sessions to delete.
     * @example
     * // Delete a few User_sessions
     * const { count } = await prisma.user_session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends user_sessionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, user_sessionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_sessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_sessions
     * const user_session = await prisma.user_session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends user_sessionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, user_sessionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User_session.
     * @param {user_sessionUpsertArgs} args - Arguments to update or create a User_session.
     * @example
     * // Update or create a User_session
     * const user_session = await prisma.user_session.upsert({
     *   create: {
     *     // ... data to create a User_session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_session we want to update
     *   }
     * })
    **/
    upsert<T extends user_sessionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, user_sessionUpsertArgs<ExtArgs>>
    ): Prisma__user_sessionClient<$Result.GetResult<Prisma.$user_sessionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of User_sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_sessionCountArgs} args - Arguments to filter User_sessions to count.
     * @example
     * // Count the number of User_sessions
     * const count = await prisma.user_session.count({
     *   where: {
     *     // ... the filter for the User_sessions we want to count
     *   }
     * })
    **/
    count<T extends user_sessionCountArgs>(
      args?: Subset<T, user_sessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_sessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_sessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_sessionAggregateArgs>(args: Subset<T, User_sessionAggregateArgs>): Prisma.PrismaPromise<GetUser_sessionAggregateType<T>>

    /**
     * Group by User_session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_sessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends user_sessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: user_sessionGroupByArgs['orderBy'] }
        : { orderBy?: user_sessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, user_sessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_sessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user_session model
   */
  readonly fields: user_sessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user_session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__user_sessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends user_session$userArgs<ExtArgs> = {}>(args?: Subset<T, user_session$userArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the user_session model
   */ 
  interface user_sessionFieldRefs {
    readonly id: FieldRef<"user_session", 'String'>
    readonly user_nim: FieldRef<"user_session", 'String'>
  }
    

  // Custom InputTypes

  /**
   * user_session findUnique
   */
  export type user_sessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_session
     */
    select?: user_sessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_sessionInclude<ExtArgs> | null
    /**
     * Filter, which user_session to fetch.
     */
    where: user_sessionWhereUniqueInput
  }


  /**
   * user_session findUniqueOrThrow
   */
  export type user_sessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_session
     */
    select?: user_sessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_sessionInclude<ExtArgs> | null
    /**
     * Filter, which user_session to fetch.
     */
    where: user_sessionWhereUniqueInput
  }


  /**
   * user_session findFirst
   */
  export type user_sessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_session
     */
    select?: user_sessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_sessionInclude<ExtArgs> | null
    /**
     * Filter, which user_session to fetch.
     */
    where?: user_sessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_sessions to fetch.
     */
    orderBy?: user_sessionOrderByWithRelationInput | user_sessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_sessions.
     */
    cursor?: user_sessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_sessions.
     */
    distinct?: User_sessionScalarFieldEnum | User_sessionScalarFieldEnum[]
  }


  /**
   * user_session findFirstOrThrow
   */
  export type user_sessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_session
     */
    select?: user_sessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_sessionInclude<ExtArgs> | null
    /**
     * Filter, which user_session to fetch.
     */
    where?: user_sessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_sessions to fetch.
     */
    orderBy?: user_sessionOrderByWithRelationInput | user_sessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_sessions.
     */
    cursor?: user_sessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_sessions.
     */
    distinct?: User_sessionScalarFieldEnum | User_sessionScalarFieldEnum[]
  }


  /**
   * user_session findMany
   */
  export type user_sessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_session
     */
    select?: user_sessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_sessionInclude<ExtArgs> | null
    /**
     * Filter, which user_sessions to fetch.
     */
    where?: user_sessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_sessions to fetch.
     */
    orderBy?: user_sessionOrderByWithRelationInput | user_sessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing user_sessions.
     */
    cursor?: user_sessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_sessions.
     */
    skip?: number
    distinct?: User_sessionScalarFieldEnum | User_sessionScalarFieldEnum[]
  }


  /**
   * user_session create
   */
  export type user_sessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_session
     */
    select?: user_sessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_sessionInclude<ExtArgs> | null
    /**
     * The data needed to create a user_session.
     */
    data: XOR<user_sessionCreateInput, user_sessionUncheckedCreateInput>
  }


  /**
   * user_session createMany
   */
  export type user_sessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many user_sessions.
     */
    data: user_sessionCreateManyInput | user_sessionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * user_session update
   */
  export type user_sessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_session
     */
    select?: user_sessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_sessionInclude<ExtArgs> | null
    /**
     * The data needed to update a user_session.
     */
    data: XOR<user_sessionUpdateInput, user_sessionUncheckedUpdateInput>
    /**
     * Choose, which user_session to update.
     */
    where: user_sessionWhereUniqueInput
  }


  /**
   * user_session updateMany
   */
  export type user_sessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update user_sessions.
     */
    data: XOR<user_sessionUpdateManyMutationInput, user_sessionUncheckedUpdateManyInput>
    /**
     * Filter which user_sessions to update
     */
    where?: user_sessionWhereInput
  }


  /**
   * user_session upsert
   */
  export type user_sessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_session
     */
    select?: user_sessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_sessionInclude<ExtArgs> | null
    /**
     * The filter to search for the user_session to update in case it exists.
     */
    where: user_sessionWhereUniqueInput
    /**
     * In case the user_session found by the `where` argument doesn't exist, create a new user_session with this data.
     */
    create: XOR<user_sessionCreateInput, user_sessionUncheckedCreateInput>
    /**
     * In case the user_session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<user_sessionUpdateInput, user_sessionUncheckedUpdateInput>
  }


  /**
   * user_session delete
   */
  export type user_sessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_session
     */
    select?: user_sessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_sessionInclude<ExtArgs> | null
    /**
     * Filter which user_session to delete.
     */
    where: user_sessionWhereUniqueInput
  }


  /**
   * user_session deleteMany
   */
  export type user_sessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_sessions to delete
     */
    where?: user_sessionWhereInput
  }


  /**
   * user_session.user
   */
  export type user_session$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    where?: userWhereInput
  }


  /**
   * user_session without action
   */
  export type user_sessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_session
     */
    select?: user_sessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_sessionInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AdminScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const EventScalarFieldEnum: {
    id: 'id',
    nama_event: 'nama_event',
    deskripsi_event: 'deskripsi_event',
    poster_event: 'poster_event',
    penyelenggara_event: 'penyelenggara_event',
    benefit_event: 'benefit_event',
    kepanitiaan_mulai: 'kepanitiaan_mulai',
    kepanitiaan_selesai: 'kepanitiaan_selesai',
    klasifikasi_divisi: 'klasifikasi_divisi',
    event_mulai: 'event_mulai',
    event_selesai: 'event_selesai',
    email_event: 'email_event',
    status: 'status',
    created_at: 'created_at',
    user_nim: 'user_nim'
  };

  export type EventScalarFieldEnum = (typeof EventScalarFieldEnum)[keyof typeof EventScalarFieldEnum]


  export const UserScalarFieldEnum: {
    nim: 'nim',
    nama_depan: 'nama_depan',
    nama_belakang: 'nama_belakang',
    email: 'email',
    phone: 'phone',
    password: 'password',
    fakultas: 'fakultas',
    program_studi: 'program_studi',
    gender: 'gender',
    created_at: 'created_at'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const User_registeredScalarFieldEnum: {
    id: 'id',
    user_nim: 'user_nim',
    event_id: 'event_id',
    alasan_join: 'alasan_join',
    cv: 'cv',
    created_at: 'created_at',
    divisi: 'divisi',
    status: 'status',
    jabatan: 'jabatan'
  };

  export type User_registeredScalarFieldEnum = (typeof User_registeredScalarFieldEnum)[keyof typeof User_registeredScalarFieldEnum]


  export const Admin_sessionScalarFieldEnum: {
    id: 'id',
    admin_id: 'admin_id'
  };

  export type Admin_sessionScalarFieldEnum = (typeof Admin_sessionScalarFieldEnum)[keyof typeof Admin_sessionScalarFieldEnum]


  export const User_sessionScalarFieldEnum: {
    id: 'id',
    user_nim: 'user_nim'
  };

  export type User_sessionScalarFieldEnum = (typeof User_sessionScalarFieldEnum)[keyof typeof User_sessionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'event_status'
   */
  export type Enumevent_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'event_status'>
    


  /**
   * Reference to a field of type 'user_gender'
   */
  export type Enumuser_genderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'user_gender'>
    


  /**
   * Reference to a field of type 'usreg_status'
   */
  export type Enumusreg_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'usreg_status'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type adminWhereInput = {
    AND?: adminWhereInput | adminWhereInput[]
    OR?: adminWhereInput[]
    NOT?: adminWhereInput | adminWhereInput[]
    id?: IntFilter<"admin"> | number
    email?: StringNullableFilter<"admin"> | string | null
    password?: StringNullableFilter<"admin"> | string | null
    admin_session?: Admin_sessionListRelationFilter
  }

  export type adminOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    admin_session?: admin_sessionOrderByRelationAggregateInput
  }

  export type adminWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: adminWhereInput | adminWhereInput[]
    OR?: adminWhereInput[]
    NOT?: adminWhereInput | adminWhereInput[]
    email?: StringNullableFilter<"admin"> | string | null
    password?: StringNullableFilter<"admin"> | string | null
    admin_session?: Admin_sessionListRelationFilter
  }, "id">

  export type adminOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    _count?: adminCountOrderByAggregateInput
    _avg?: adminAvgOrderByAggregateInput
    _max?: adminMaxOrderByAggregateInput
    _min?: adminMinOrderByAggregateInput
    _sum?: adminSumOrderByAggregateInput
  }

  export type adminScalarWhereWithAggregatesInput = {
    AND?: adminScalarWhereWithAggregatesInput | adminScalarWhereWithAggregatesInput[]
    OR?: adminScalarWhereWithAggregatesInput[]
    NOT?: adminScalarWhereWithAggregatesInput | adminScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"admin"> | number
    email?: StringNullableWithAggregatesFilter<"admin"> | string | null
    password?: StringNullableWithAggregatesFilter<"admin"> | string | null
  }

  export type eventWhereInput = {
    AND?: eventWhereInput | eventWhereInput[]
    OR?: eventWhereInput[]
    NOT?: eventWhereInput | eventWhereInput[]
    id?: IntFilter<"event"> | number
    nama_event?: StringFilter<"event"> | string
    deskripsi_event?: StringNullableFilter<"event"> | string | null
    poster_event?: StringFilter<"event"> | string
    penyelenggara_event?: StringFilter<"event"> | string
    benefit_event?: StringNullableFilter<"event"> | string | null
    kepanitiaan_mulai?: DateTimeFilter<"event"> | Date | string
    kepanitiaan_selesai?: DateTimeFilter<"event"> | Date | string
    klasifikasi_divisi?: StringNullableFilter<"event"> | string | null
    event_mulai?: DateTimeFilter<"event"> | Date | string
    event_selesai?: DateTimeFilter<"event"> | Date | string
    email_event?: StringNullableFilter<"event"> | string | null
    status?: Enumevent_statusNullableFilter<"event"> | $Enums.event_status | null
    created_at?: DateTimeFilter<"event"> | Date | string
    user_nim?: StringNullableFilter<"event"> | string | null
    user?: XOR<UserNullableRelationFilter, userWhereInput> | null
    user_registered?: User_registeredListRelationFilter
  }

  export type eventOrderByWithRelationInput = {
    id?: SortOrder
    nama_event?: SortOrder
    deskripsi_event?: SortOrderInput | SortOrder
    poster_event?: SortOrder
    penyelenggara_event?: SortOrder
    benefit_event?: SortOrderInput | SortOrder
    kepanitiaan_mulai?: SortOrder
    kepanitiaan_selesai?: SortOrder
    klasifikasi_divisi?: SortOrderInput | SortOrder
    event_mulai?: SortOrder
    event_selesai?: SortOrder
    email_event?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    created_at?: SortOrder
    user_nim?: SortOrderInput | SortOrder
    user?: userOrderByWithRelationInput
    user_registered?: user_registeredOrderByRelationAggregateInput
  }

  export type eventWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: eventWhereInput | eventWhereInput[]
    OR?: eventWhereInput[]
    NOT?: eventWhereInput | eventWhereInput[]
    nama_event?: StringFilter<"event"> | string
    deskripsi_event?: StringNullableFilter<"event"> | string | null
    poster_event?: StringFilter<"event"> | string
    penyelenggara_event?: StringFilter<"event"> | string
    benefit_event?: StringNullableFilter<"event"> | string | null
    kepanitiaan_mulai?: DateTimeFilter<"event"> | Date | string
    kepanitiaan_selesai?: DateTimeFilter<"event"> | Date | string
    klasifikasi_divisi?: StringNullableFilter<"event"> | string | null
    event_mulai?: DateTimeFilter<"event"> | Date | string
    event_selesai?: DateTimeFilter<"event"> | Date | string
    email_event?: StringNullableFilter<"event"> | string | null
    status?: Enumevent_statusNullableFilter<"event"> | $Enums.event_status | null
    created_at?: DateTimeFilter<"event"> | Date | string
    user_nim?: StringNullableFilter<"event"> | string | null
    user?: XOR<UserNullableRelationFilter, userWhereInput> | null
    user_registered?: User_registeredListRelationFilter
  }, "id">

  export type eventOrderByWithAggregationInput = {
    id?: SortOrder
    nama_event?: SortOrder
    deskripsi_event?: SortOrderInput | SortOrder
    poster_event?: SortOrder
    penyelenggara_event?: SortOrder
    benefit_event?: SortOrderInput | SortOrder
    kepanitiaan_mulai?: SortOrder
    kepanitiaan_selesai?: SortOrder
    klasifikasi_divisi?: SortOrderInput | SortOrder
    event_mulai?: SortOrder
    event_selesai?: SortOrder
    email_event?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    created_at?: SortOrder
    user_nim?: SortOrderInput | SortOrder
    _count?: eventCountOrderByAggregateInput
    _avg?: eventAvgOrderByAggregateInput
    _max?: eventMaxOrderByAggregateInput
    _min?: eventMinOrderByAggregateInput
    _sum?: eventSumOrderByAggregateInput
  }

  export type eventScalarWhereWithAggregatesInput = {
    AND?: eventScalarWhereWithAggregatesInput | eventScalarWhereWithAggregatesInput[]
    OR?: eventScalarWhereWithAggregatesInput[]
    NOT?: eventScalarWhereWithAggregatesInput | eventScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"event"> | number
    nama_event?: StringWithAggregatesFilter<"event"> | string
    deskripsi_event?: StringNullableWithAggregatesFilter<"event"> | string | null
    poster_event?: StringWithAggregatesFilter<"event"> | string
    penyelenggara_event?: StringWithAggregatesFilter<"event"> | string
    benefit_event?: StringNullableWithAggregatesFilter<"event"> | string | null
    kepanitiaan_mulai?: DateTimeWithAggregatesFilter<"event"> | Date | string
    kepanitiaan_selesai?: DateTimeWithAggregatesFilter<"event"> | Date | string
    klasifikasi_divisi?: StringNullableWithAggregatesFilter<"event"> | string | null
    event_mulai?: DateTimeWithAggregatesFilter<"event"> | Date | string
    event_selesai?: DateTimeWithAggregatesFilter<"event"> | Date | string
    email_event?: StringNullableWithAggregatesFilter<"event"> | string | null
    status?: Enumevent_statusNullableWithAggregatesFilter<"event"> | $Enums.event_status | null
    created_at?: DateTimeWithAggregatesFilter<"event"> | Date | string
    user_nim?: StringNullableWithAggregatesFilter<"event"> | string | null
  }

  export type userWhereInput = {
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    nim?: StringFilter<"user"> | string
    nama_depan?: StringNullableFilter<"user"> | string | null
    nama_belakang?: StringNullableFilter<"user"> | string | null
    email?: StringFilter<"user"> | string
    phone?: StringFilter<"user"> | string
    password?: StringFilter<"user"> | string
    fakultas?: StringFilter<"user"> | string
    program_studi?: StringFilter<"user"> | string
    gender?: Enumuser_genderFilter<"user"> | $Enums.user_gender
    created_at?: DateTimeFilter<"user"> | Date | string
    event?: EventListRelationFilter
    user_registered?: User_registeredListRelationFilter
    user_session?: User_sessionListRelationFilter
  }

  export type userOrderByWithRelationInput = {
    nim?: SortOrder
    nama_depan?: SortOrderInput | SortOrder
    nama_belakang?: SortOrderInput | SortOrder
    email?: SortOrder
    phone?: SortOrder
    password?: SortOrder
    fakultas?: SortOrder
    program_studi?: SortOrder
    gender?: SortOrder
    created_at?: SortOrder
    event?: eventOrderByRelationAggregateInput
    user_registered?: user_registeredOrderByRelationAggregateInput
    user_session?: user_sessionOrderByRelationAggregateInput
  }

  export type userWhereUniqueInput = Prisma.AtLeast<{
    nim?: string
    email?: string
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    nama_depan?: StringNullableFilter<"user"> | string | null
    nama_belakang?: StringNullableFilter<"user"> | string | null
    phone?: StringFilter<"user"> | string
    password?: StringFilter<"user"> | string
    fakultas?: StringFilter<"user"> | string
    program_studi?: StringFilter<"user"> | string
    gender?: Enumuser_genderFilter<"user"> | $Enums.user_gender
    created_at?: DateTimeFilter<"user"> | Date | string
    event?: EventListRelationFilter
    user_registered?: User_registeredListRelationFilter
    user_session?: User_sessionListRelationFilter
  }, "nim" | "email">

  export type userOrderByWithAggregationInput = {
    nim?: SortOrder
    nama_depan?: SortOrderInput | SortOrder
    nama_belakang?: SortOrderInput | SortOrder
    email?: SortOrder
    phone?: SortOrder
    password?: SortOrder
    fakultas?: SortOrder
    program_studi?: SortOrder
    gender?: SortOrder
    created_at?: SortOrder
    _count?: userCountOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    OR?: userScalarWhereWithAggregatesInput[]
    NOT?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    nim?: StringWithAggregatesFilter<"user"> | string
    nama_depan?: StringNullableWithAggregatesFilter<"user"> | string | null
    nama_belakang?: StringNullableWithAggregatesFilter<"user"> | string | null
    email?: StringWithAggregatesFilter<"user"> | string
    phone?: StringWithAggregatesFilter<"user"> | string
    password?: StringWithAggregatesFilter<"user"> | string
    fakultas?: StringWithAggregatesFilter<"user"> | string
    program_studi?: StringWithAggregatesFilter<"user"> | string
    gender?: Enumuser_genderWithAggregatesFilter<"user"> | $Enums.user_gender
    created_at?: DateTimeWithAggregatesFilter<"user"> | Date | string
  }

  export type user_registeredWhereInput = {
    AND?: user_registeredWhereInput | user_registeredWhereInput[]
    OR?: user_registeredWhereInput[]
    NOT?: user_registeredWhereInput | user_registeredWhereInput[]
    id?: IntFilter<"user_registered"> | number
    user_nim?: StringNullableFilter<"user_registered"> | string | null
    event_id?: IntNullableFilter<"user_registered"> | number | null
    alasan_join?: StringNullableFilter<"user_registered"> | string | null
    cv?: StringNullableFilter<"user_registered"> | string | null
    created_at?: DateTimeFilter<"user_registered"> | Date | string
    divisi?: StringNullableFilter<"user_registered"> | string | null
    status?: Enumusreg_statusNullableFilter<"user_registered"> | $Enums.usreg_status | null
    jabatan?: StringNullableFilter<"user_registered"> | string | null
    user?: XOR<UserNullableRelationFilter, userWhereInput> | null
    event?: XOR<EventNullableRelationFilter, eventWhereInput> | null
  }

  export type user_registeredOrderByWithRelationInput = {
    id?: SortOrder
    user_nim?: SortOrderInput | SortOrder
    event_id?: SortOrderInput | SortOrder
    alasan_join?: SortOrderInput | SortOrder
    cv?: SortOrderInput | SortOrder
    created_at?: SortOrder
    divisi?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    jabatan?: SortOrderInput | SortOrder
    user?: userOrderByWithRelationInput
    event?: eventOrderByWithRelationInput
  }

  export type user_registeredWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: user_registeredWhereInput | user_registeredWhereInput[]
    OR?: user_registeredWhereInput[]
    NOT?: user_registeredWhereInput | user_registeredWhereInput[]
    user_nim?: StringNullableFilter<"user_registered"> | string | null
    event_id?: IntNullableFilter<"user_registered"> | number | null
    alasan_join?: StringNullableFilter<"user_registered"> | string | null
    cv?: StringNullableFilter<"user_registered"> | string | null
    created_at?: DateTimeFilter<"user_registered"> | Date | string
    divisi?: StringNullableFilter<"user_registered"> | string | null
    status?: Enumusreg_statusNullableFilter<"user_registered"> | $Enums.usreg_status | null
    jabatan?: StringNullableFilter<"user_registered"> | string | null
    user?: XOR<UserNullableRelationFilter, userWhereInput> | null
    event?: XOR<EventNullableRelationFilter, eventWhereInput> | null
  }, "id">

  export type user_registeredOrderByWithAggregationInput = {
    id?: SortOrder
    user_nim?: SortOrderInput | SortOrder
    event_id?: SortOrderInput | SortOrder
    alasan_join?: SortOrderInput | SortOrder
    cv?: SortOrderInput | SortOrder
    created_at?: SortOrder
    divisi?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    jabatan?: SortOrderInput | SortOrder
    _count?: user_registeredCountOrderByAggregateInput
    _avg?: user_registeredAvgOrderByAggregateInput
    _max?: user_registeredMaxOrderByAggregateInput
    _min?: user_registeredMinOrderByAggregateInput
    _sum?: user_registeredSumOrderByAggregateInput
  }

  export type user_registeredScalarWhereWithAggregatesInput = {
    AND?: user_registeredScalarWhereWithAggregatesInput | user_registeredScalarWhereWithAggregatesInput[]
    OR?: user_registeredScalarWhereWithAggregatesInput[]
    NOT?: user_registeredScalarWhereWithAggregatesInput | user_registeredScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"user_registered"> | number
    user_nim?: StringNullableWithAggregatesFilter<"user_registered"> | string | null
    event_id?: IntNullableWithAggregatesFilter<"user_registered"> | number | null
    alasan_join?: StringNullableWithAggregatesFilter<"user_registered"> | string | null
    cv?: StringNullableWithAggregatesFilter<"user_registered"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"user_registered"> | Date | string
    divisi?: StringNullableWithAggregatesFilter<"user_registered"> | string | null
    status?: Enumusreg_statusNullableWithAggregatesFilter<"user_registered"> | $Enums.usreg_status | null
    jabatan?: StringNullableWithAggregatesFilter<"user_registered"> | string | null
  }

  export type admin_sessionWhereInput = {
    AND?: admin_sessionWhereInput | admin_sessionWhereInput[]
    OR?: admin_sessionWhereInput[]
    NOT?: admin_sessionWhereInput | admin_sessionWhereInput[]
    id?: StringFilter<"admin_session"> | string
    admin_id?: IntNullableFilter<"admin_session"> | number | null
    admin?: XOR<AdminNullableRelationFilter, adminWhereInput> | null
  }

  export type admin_sessionOrderByWithRelationInput = {
    id?: SortOrder
    admin_id?: SortOrderInput | SortOrder
    admin?: adminOrderByWithRelationInput
  }

  export type admin_sessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: admin_sessionWhereInput | admin_sessionWhereInput[]
    OR?: admin_sessionWhereInput[]
    NOT?: admin_sessionWhereInput | admin_sessionWhereInput[]
    admin_id?: IntNullableFilter<"admin_session"> | number | null
    admin?: XOR<AdminNullableRelationFilter, adminWhereInput> | null
  }, "id">

  export type admin_sessionOrderByWithAggregationInput = {
    id?: SortOrder
    admin_id?: SortOrderInput | SortOrder
    _count?: admin_sessionCountOrderByAggregateInput
    _avg?: admin_sessionAvgOrderByAggregateInput
    _max?: admin_sessionMaxOrderByAggregateInput
    _min?: admin_sessionMinOrderByAggregateInput
    _sum?: admin_sessionSumOrderByAggregateInput
  }

  export type admin_sessionScalarWhereWithAggregatesInput = {
    AND?: admin_sessionScalarWhereWithAggregatesInput | admin_sessionScalarWhereWithAggregatesInput[]
    OR?: admin_sessionScalarWhereWithAggregatesInput[]
    NOT?: admin_sessionScalarWhereWithAggregatesInput | admin_sessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"admin_session"> | string
    admin_id?: IntNullableWithAggregatesFilter<"admin_session"> | number | null
  }

  export type user_sessionWhereInput = {
    AND?: user_sessionWhereInput | user_sessionWhereInput[]
    OR?: user_sessionWhereInput[]
    NOT?: user_sessionWhereInput | user_sessionWhereInput[]
    id?: StringFilter<"user_session"> | string
    user_nim?: StringNullableFilter<"user_session"> | string | null
    user?: XOR<UserNullableRelationFilter, userWhereInput> | null
  }

  export type user_sessionOrderByWithRelationInput = {
    id?: SortOrder
    user_nim?: SortOrderInput | SortOrder
    user?: userOrderByWithRelationInput
  }

  export type user_sessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: user_sessionWhereInput | user_sessionWhereInput[]
    OR?: user_sessionWhereInput[]
    NOT?: user_sessionWhereInput | user_sessionWhereInput[]
    user_nim?: StringNullableFilter<"user_session"> | string | null
    user?: XOR<UserNullableRelationFilter, userWhereInput> | null
  }, "id">

  export type user_sessionOrderByWithAggregationInput = {
    id?: SortOrder
    user_nim?: SortOrderInput | SortOrder
    _count?: user_sessionCountOrderByAggregateInput
    _max?: user_sessionMaxOrderByAggregateInput
    _min?: user_sessionMinOrderByAggregateInput
  }

  export type user_sessionScalarWhereWithAggregatesInput = {
    AND?: user_sessionScalarWhereWithAggregatesInput | user_sessionScalarWhereWithAggregatesInput[]
    OR?: user_sessionScalarWhereWithAggregatesInput[]
    NOT?: user_sessionScalarWhereWithAggregatesInput | user_sessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"user_session"> | string
    user_nim?: StringNullableWithAggregatesFilter<"user_session"> | string | null
  }

  export type adminCreateInput = {
    email?: string | null
    password?: string | null
    admin_session?: admin_sessionCreateNestedManyWithoutAdminInput
  }

  export type adminUncheckedCreateInput = {
    id?: number
    email?: string | null
    password?: string | null
    admin_session?: admin_sessionUncheckedCreateNestedManyWithoutAdminInput
  }

  export type adminUpdateInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    admin_session?: admin_sessionUpdateManyWithoutAdminNestedInput
  }

  export type adminUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    admin_session?: admin_sessionUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type adminCreateManyInput = {
    id?: number
    email?: string | null
    password?: string | null
  }

  export type adminUpdateManyMutationInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type adminUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type eventCreateInput = {
    nama_event: string
    deskripsi_event?: string | null
    poster_event: string
    penyelenggara_event: string
    benefit_event?: string | null
    kepanitiaan_mulai?: Date | string
    kepanitiaan_selesai?: Date | string
    klasifikasi_divisi?: string | null
    event_mulai?: Date | string
    event_selesai?: Date | string
    email_event?: string | null
    status?: $Enums.event_status | null
    created_at?: Date | string
    user?: userCreateNestedOneWithoutEventInput
    user_registered?: user_registeredCreateNestedManyWithoutEventInput
  }

  export type eventUncheckedCreateInput = {
    id?: number
    nama_event: string
    deskripsi_event?: string | null
    poster_event: string
    penyelenggara_event: string
    benefit_event?: string | null
    kepanitiaan_mulai?: Date | string
    kepanitiaan_selesai?: Date | string
    klasifikasi_divisi?: string | null
    event_mulai?: Date | string
    event_selesai?: Date | string
    email_event?: string | null
    status?: $Enums.event_status | null
    created_at?: Date | string
    user_nim?: string | null
    user_registered?: user_registeredUncheckedCreateNestedManyWithoutEventInput
  }

  export type eventUpdateInput = {
    nama_event?: StringFieldUpdateOperationsInput | string
    deskripsi_event?: NullableStringFieldUpdateOperationsInput | string | null
    poster_event?: StringFieldUpdateOperationsInput | string
    penyelenggara_event?: StringFieldUpdateOperationsInput | string
    benefit_event?: NullableStringFieldUpdateOperationsInput | string | null
    kepanitiaan_mulai?: DateTimeFieldUpdateOperationsInput | Date | string
    kepanitiaan_selesai?: DateTimeFieldUpdateOperationsInput | Date | string
    klasifikasi_divisi?: NullableStringFieldUpdateOperationsInput | string | null
    event_mulai?: DateTimeFieldUpdateOperationsInput | Date | string
    event_selesai?: DateTimeFieldUpdateOperationsInput | Date | string
    email_event?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumevent_statusFieldUpdateOperationsInput | $Enums.event_status | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneWithoutEventNestedInput
    user_registered?: user_registeredUpdateManyWithoutEventNestedInput
  }

  export type eventUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama_event?: StringFieldUpdateOperationsInput | string
    deskripsi_event?: NullableStringFieldUpdateOperationsInput | string | null
    poster_event?: StringFieldUpdateOperationsInput | string
    penyelenggara_event?: StringFieldUpdateOperationsInput | string
    benefit_event?: NullableStringFieldUpdateOperationsInput | string | null
    kepanitiaan_mulai?: DateTimeFieldUpdateOperationsInput | Date | string
    kepanitiaan_selesai?: DateTimeFieldUpdateOperationsInput | Date | string
    klasifikasi_divisi?: NullableStringFieldUpdateOperationsInput | string | null
    event_mulai?: DateTimeFieldUpdateOperationsInput | Date | string
    event_selesai?: DateTimeFieldUpdateOperationsInput | Date | string
    email_event?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumevent_statusFieldUpdateOperationsInput | $Enums.event_status | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_nim?: NullableStringFieldUpdateOperationsInput | string | null
    user_registered?: user_registeredUncheckedUpdateManyWithoutEventNestedInput
  }

  export type eventCreateManyInput = {
    id?: number
    nama_event: string
    deskripsi_event?: string | null
    poster_event: string
    penyelenggara_event: string
    benefit_event?: string | null
    kepanitiaan_mulai?: Date | string
    kepanitiaan_selesai?: Date | string
    klasifikasi_divisi?: string | null
    event_mulai?: Date | string
    event_selesai?: Date | string
    email_event?: string | null
    status?: $Enums.event_status | null
    created_at?: Date | string
    user_nim?: string | null
  }

  export type eventUpdateManyMutationInput = {
    nama_event?: StringFieldUpdateOperationsInput | string
    deskripsi_event?: NullableStringFieldUpdateOperationsInput | string | null
    poster_event?: StringFieldUpdateOperationsInput | string
    penyelenggara_event?: StringFieldUpdateOperationsInput | string
    benefit_event?: NullableStringFieldUpdateOperationsInput | string | null
    kepanitiaan_mulai?: DateTimeFieldUpdateOperationsInput | Date | string
    kepanitiaan_selesai?: DateTimeFieldUpdateOperationsInput | Date | string
    klasifikasi_divisi?: NullableStringFieldUpdateOperationsInput | string | null
    event_mulai?: DateTimeFieldUpdateOperationsInput | Date | string
    event_selesai?: DateTimeFieldUpdateOperationsInput | Date | string
    email_event?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumevent_statusFieldUpdateOperationsInput | $Enums.event_status | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type eventUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama_event?: StringFieldUpdateOperationsInput | string
    deskripsi_event?: NullableStringFieldUpdateOperationsInput | string | null
    poster_event?: StringFieldUpdateOperationsInput | string
    penyelenggara_event?: StringFieldUpdateOperationsInput | string
    benefit_event?: NullableStringFieldUpdateOperationsInput | string | null
    kepanitiaan_mulai?: DateTimeFieldUpdateOperationsInput | Date | string
    kepanitiaan_selesai?: DateTimeFieldUpdateOperationsInput | Date | string
    klasifikasi_divisi?: NullableStringFieldUpdateOperationsInput | string | null
    event_mulai?: DateTimeFieldUpdateOperationsInput | Date | string
    event_selesai?: DateTimeFieldUpdateOperationsInput | Date | string
    email_event?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumevent_statusFieldUpdateOperationsInput | $Enums.event_status | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_nim?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type userCreateInput = {
    nim: string
    nama_depan?: string | null
    nama_belakang?: string | null
    email: string
    phone: string
    password: string
    fakultas: string
    program_studi: string
    gender: $Enums.user_gender
    created_at?: Date | string
    event?: eventCreateNestedManyWithoutUserInput
    user_registered?: user_registeredCreateNestedManyWithoutUserInput
    user_session?: user_sessionCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateInput = {
    nim: string
    nama_depan?: string | null
    nama_belakang?: string | null
    email: string
    phone: string
    password: string
    fakultas: string
    program_studi: string
    gender: $Enums.user_gender
    created_at?: Date | string
    event?: eventUncheckedCreateNestedManyWithoutUserInput
    user_registered?: user_registeredUncheckedCreateNestedManyWithoutUserInput
    user_session?: user_sessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type userUpdateInput = {
    nim?: StringFieldUpdateOperationsInput | string
    nama_depan?: NullableStringFieldUpdateOperationsInput | string | null
    nama_belakang?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fakultas?: StringFieldUpdateOperationsInput | string
    program_studi?: StringFieldUpdateOperationsInput | string
    gender?: Enumuser_genderFieldUpdateOperationsInput | $Enums.user_gender
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: eventUpdateManyWithoutUserNestedInput
    user_registered?: user_registeredUpdateManyWithoutUserNestedInput
    user_session?: user_sessionUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateInput = {
    nim?: StringFieldUpdateOperationsInput | string
    nama_depan?: NullableStringFieldUpdateOperationsInput | string | null
    nama_belakang?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fakultas?: StringFieldUpdateOperationsInput | string
    program_studi?: StringFieldUpdateOperationsInput | string
    gender?: Enumuser_genderFieldUpdateOperationsInput | $Enums.user_gender
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: eventUncheckedUpdateManyWithoutUserNestedInput
    user_registered?: user_registeredUncheckedUpdateManyWithoutUserNestedInput
    user_session?: user_sessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type userCreateManyInput = {
    nim: string
    nama_depan?: string | null
    nama_belakang?: string | null
    email: string
    phone: string
    password: string
    fakultas: string
    program_studi: string
    gender: $Enums.user_gender
    created_at?: Date | string
  }

  export type userUpdateManyMutationInput = {
    nim?: StringFieldUpdateOperationsInput | string
    nama_depan?: NullableStringFieldUpdateOperationsInput | string | null
    nama_belakang?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fakultas?: StringFieldUpdateOperationsInput | string
    program_studi?: StringFieldUpdateOperationsInput | string
    gender?: Enumuser_genderFieldUpdateOperationsInput | $Enums.user_gender
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userUncheckedUpdateManyInput = {
    nim?: StringFieldUpdateOperationsInput | string
    nama_depan?: NullableStringFieldUpdateOperationsInput | string | null
    nama_belakang?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fakultas?: StringFieldUpdateOperationsInput | string
    program_studi?: StringFieldUpdateOperationsInput | string
    gender?: Enumuser_genderFieldUpdateOperationsInput | $Enums.user_gender
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type user_registeredCreateInput = {
    alasan_join?: string | null
    cv?: string | null
    created_at?: Date | string
    divisi?: string | null
    status?: $Enums.usreg_status | null
    jabatan?: string | null
    user?: userCreateNestedOneWithoutUser_registeredInput
    event?: eventCreateNestedOneWithoutUser_registeredInput
  }

  export type user_registeredUncheckedCreateInput = {
    id?: number
    user_nim?: string | null
    event_id?: number | null
    alasan_join?: string | null
    cv?: string | null
    created_at?: Date | string
    divisi?: string | null
    status?: $Enums.usreg_status | null
    jabatan?: string | null
  }

  export type user_registeredUpdateInput = {
    alasan_join?: NullableStringFieldUpdateOperationsInput | string | null
    cv?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    divisi?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumusreg_statusFieldUpdateOperationsInput | $Enums.usreg_status | null
    jabatan?: NullableStringFieldUpdateOperationsInput | string | null
    user?: userUpdateOneWithoutUser_registeredNestedInput
    event?: eventUpdateOneWithoutUser_registeredNestedInput
  }

  export type user_registeredUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_nim?: NullableStringFieldUpdateOperationsInput | string | null
    event_id?: NullableIntFieldUpdateOperationsInput | number | null
    alasan_join?: NullableStringFieldUpdateOperationsInput | string | null
    cv?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    divisi?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumusreg_statusFieldUpdateOperationsInput | $Enums.usreg_status | null
    jabatan?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_registeredCreateManyInput = {
    id?: number
    user_nim?: string | null
    event_id?: number | null
    alasan_join?: string | null
    cv?: string | null
    created_at?: Date | string
    divisi?: string | null
    status?: $Enums.usreg_status | null
    jabatan?: string | null
  }

  export type user_registeredUpdateManyMutationInput = {
    alasan_join?: NullableStringFieldUpdateOperationsInput | string | null
    cv?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    divisi?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumusreg_statusFieldUpdateOperationsInput | $Enums.usreg_status | null
    jabatan?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_registeredUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_nim?: NullableStringFieldUpdateOperationsInput | string | null
    event_id?: NullableIntFieldUpdateOperationsInput | number | null
    alasan_join?: NullableStringFieldUpdateOperationsInput | string | null
    cv?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    divisi?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumusreg_statusFieldUpdateOperationsInput | $Enums.usreg_status | null
    jabatan?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type admin_sessionCreateInput = {
    id: string
    admin?: adminCreateNestedOneWithoutAdmin_sessionInput
  }

  export type admin_sessionUncheckedCreateInput = {
    id: string
    admin_id?: number | null
  }

  export type admin_sessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    admin?: adminUpdateOneWithoutAdmin_sessionNestedInput
  }

  export type admin_sessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    admin_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type admin_sessionCreateManyInput = {
    id: string
    admin_id?: number | null
  }

  export type admin_sessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type admin_sessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    admin_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type user_sessionCreateInput = {
    id: string
    user?: userCreateNestedOneWithoutUser_sessionInput
  }

  export type user_sessionUncheckedCreateInput = {
    id: string
    user_nim?: string | null
  }

  export type user_sessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: userUpdateOneWithoutUser_sessionNestedInput
  }

  export type user_sessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_nim?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_sessionCreateManyInput = {
    id: string
    user_nim?: string | null
  }

  export type user_sessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type user_sessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_nim?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type Admin_sessionListRelationFilter = {
    every?: admin_sessionWhereInput
    some?: admin_sessionWhereInput
    none?: admin_sessionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type admin_sessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type adminCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type adminAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type adminMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type adminMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type adminSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type Enumevent_statusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.event_status | Enumevent_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.event_status[] | null
    notIn?: $Enums.event_status[] | null
    not?: NestedEnumevent_statusNullableFilter<$PrismaModel> | $Enums.event_status | null
  }

  export type UserNullableRelationFilter = {
    is?: userWhereInput | null
    isNot?: userWhereInput | null
  }

  export type User_registeredListRelationFilter = {
    every?: user_registeredWhereInput
    some?: user_registeredWhereInput
    none?: user_registeredWhereInput
  }

  export type user_registeredOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type eventCountOrderByAggregateInput = {
    id?: SortOrder
    nama_event?: SortOrder
    deskripsi_event?: SortOrder
    poster_event?: SortOrder
    penyelenggara_event?: SortOrder
    benefit_event?: SortOrder
    kepanitiaan_mulai?: SortOrder
    kepanitiaan_selesai?: SortOrder
    klasifikasi_divisi?: SortOrder
    event_mulai?: SortOrder
    event_selesai?: SortOrder
    email_event?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    user_nim?: SortOrder
  }

  export type eventAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type eventMaxOrderByAggregateInput = {
    id?: SortOrder
    nama_event?: SortOrder
    deskripsi_event?: SortOrder
    poster_event?: SortOrder
    penyelenggara_event?: SortOrder
    benefit_event?: SortOrder
    kepanitiaan_mulai?: SortOrder
    kepanitiaan_selesai?: SortOrder
    klasifikasi_divisi?: SortOrder
    event_mulai?: SortOrder
    event_selesai?: SortOrder
    email_event?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    user_nim?: SortOrder
  }

  export type eventMinOrderByAggregateInput = {
    id?: SortOrder
    nama_event?: SortOrder
    deskripsi_event?: SortOrder
    poster_event?: SortOrder
    penyelenggara_event?: SortOrder
    benefit_event?: SortOrder
    kepanitiaan_mulai?: SortOrder
    kepanitiaan_selesai?: SortOrder
    klasifikasi_divisi?: SortOrder
    event_mulai?: SortOrder
    event_selesai?: SortOrder
    email_event?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    user_nim?: SortOrder
  }

  export type eventSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type Enumevent_statusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.event_status | Enumevent_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.event_status[] | null
    notIn?: $Enums.event_status[] | null
    not?: NestedEnumevent_statusNullableWithAggregatesFilter<$PrismaModel> | $Enums.event_status | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumevent_statusNullableFilter<$PrismaModel>
    _max?: NestedEnumevent_statusNullableFilter<$PrismaModel>
  }

  export type Enumuser_genderFilter<$PrismaModel = never> = {
    equals?: $Enums.user_gender | Enumuser_genderFieldRefInput<$PrismaModel>
    in?: $Enums.user_gender[]
    notIn?: $Enums.user_gender[]
    not?: NestedEnumuser_genderFilter<$PrismaModel> | $Enums.user_gender
  }

  export type EventListRelationFilter = {
    every?: eventWhereInput
    some?: eventWhereInput
    none?: eventWhereInput
  }

  export type User_sessionListRelationFilter = {
    every?: user_sessionWhereInput
    some?: user_sessionWhereInput
    none?: user_sessionWhereInput
  }

  export type eventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type user_sessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type userCountOrderByAggregateInput = {
    nim?: SortOrder
    nama_depan?: SortOrder
    nama_belakang?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    password?: SortOrder
    fakultas?: SortOrder
    program_studi?: SortOrder
    gender?: SortOrder
    created_at?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    nim?: SortOrder
    nama_depan?: SortOrder
    nama_belakang?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    password?: SortOrder
    fakultas?: SortOrder
    program_studi?: SortOrder
    gender?: SortOrder
    created_at?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    nim?: SortOrder
    nama_depan?: SortOrder
    nama_belakang?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    password?: SortOrder
    fakultas?: SortOrder
    program_studi?: SortOrder
    gender?: SortOrder
    created_at?: SortOrder
  }

  export type Enumuser_genderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.user_gender | Enumuser_genderFieldRefInput<$PrismaModel>
    in?: $Enums.user_gender[]
    notIn?: $Enums.user_gender[]
    not?: NestedEnumuser_genderWithAggregatesFilter<$PrismaModel> | $Enums.user_gender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumuser_genderFilter<$PrismaModel>
    _max?: NestedEnumuser_genderFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type Enumusreg_statusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.usreg_status | Enumusreg_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.usreg_status[] | null
    notIn?: $Enums.usreg_status[] | null
    not?: NestedEnumusreg_statusNullableFilter<$PrismaModel> | $Enums.usreg_status | null
  }

  export type EventNullableRelationFilter = {
    is?: eventWhereInput | null
    isNot?: eventWhereInput | null
  }

  export type user_registeredCountOrderByAggregateInput = {
    id?: SortOrder
    user_nim?: SortOrder
    event_id?: SortOrder
    alasan_join?: SortOrder
    cv?: SortOrder
    created_at?: SortOrder
    divisi?: SortOrder
    status?: SortOrder
    jabatan?: SortOrder
  }

  export type user_registeredAvgOrderByAggregateInput = {
    id?: SortOrder
    event_id?: SortOrder
  }

  export type user_registeredMaxOrderByAggregateInput = {
    id?: SortOrder
    user_nim?: SortOrder
    event_id?: SortOrder
    alasan_join?: SortOrder
    cv?: SortOrder
    created_at?: SortOrder
    divisi?: SortOrder
    status?: SortOrder
    jabatan?: SortOrder
  }

  export type user_registeredMinOrderByAggregateInput = {
    id?: SortOrder
    user_nim?: SortOrder
    event_id?: SortOrder
    alasan_join?: SortOrder
    cv?: SortOrder
    created_at?: SortOrder
    divisi?: SortOrder
    status?: SortOrder
    jabatan?: SortOrder
  }

  export type user_registeredSumOrderByAggregateInput = {
    id?: SortOrder
    event_id?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type Enumusreg_statusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.usreg_status | Enumusreg_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.usreg_status[] | null
    notIn?: $Enums.usreg_status[] | null
    not?: NestedEnumusreg_statusNullableWithAggregatesFilter<$PrismaModel> | $Enums.usreg_status | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumusreg_statusNullableFilter<$PrismaModel>
    _max?: NestedEnumusreg_statusNullableFilter<$PrismaModel>
  }

  export type AdminNullableRelationFilter = {
    is?: adminWhereInput | null
    isNot?: adminWhereInput | null
  }

  export type admin_sessionCountOrderByAggregateInput = {
    id?: SortOrder
    admin_id?: SortOrder
  }

  export type admin_sessionAvgOrderByAggregateInput = {
    admin_id?: SortOrder
  }

  export type admin_sessionMaxOrderByAggregateInput = {
    id?: SortOrder
    admin_id?: SortOrder
  }

  export type admin_sessionMinOrderByAggregateInput = {
    id?: SortOrder
    admin_id?: SortOrder
  }

  export type admin_sessionSumOrderByAggregateInput = {
    admin_id?: SortOrder
  }

  export type user_sessionCountOrderByAggregateInput = {
    id?: SortOrder
    user_nim?: SortOrder
  }

  export type user_sessionMaxOrderByAggregateInput = {
    id?: SortOrder
    user_nim?: SortOrder
  }

  export type user_sessionMinOrderByAggregateInput = {
    id?: SortOrder
    user_nim?: SortOrder
  }

  export type admin_sessionCreateNestedManyWithoutAdminInput = {
    create?: XOR<admin_sessionCreateWithoutAdminInput, admin_sessionUncheckedCreateWithoutAdminInput> | admin_sessionCreateWithoutAdminInput[] | admin_sessionUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: admin_sessionCreateOrConnectWithoutAdminInput | admin_sessionCreateOrConnectWithoutAdminInput[]
    createMany?: admin_sessionCreateManyAdminInputEnvelope
    connect?: admin_sessionWhereUniqueInput | admin_sessionWhereUniqueInput[]
  }

  export type admin_sessionUncheckedCreateNestedManyWithoutAdminInput = {
    create?: XOR<admin_sessionCreateWithoutAdminInput, admin_sessionUncheckedCreateWithoutAdminInput> | admin_sessionCreateWithoutAdminInput[] | admin_sessionUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: admin_sessionCreateOrConnectWithoutAdminInput | admin_sessionCreateOrConnectWithoutAdminInput[]
    createMany?: admin_sessionCreateManyAdminInputEnvelope
    connect?: admin_sessionWhereUniqueInput | admin_sessionWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type admin_sessionUpdateManyWithoutAdminNestedInput = {
    create?: XOR<admin_sessionCreateWithoutAdminInput, admin_sessionUncheckedCreateWithoutAdminInput> | admin_sessionCreateWithoutAdminInput[] | admin_sessionUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: admin_sessionCreateOrConnectWithoutAdminInput | admin_sessionCreateOrConnectWithoutAdminInput[]
    upsert?: admin_sessionUpsertWithWhereUniqueWithoutAdminInput | admin_sessionUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: admin_sessionCreateManyAdminInputEnvelope
    set?: admin_sessionWhereUniqueInput | admin_sessionWhereUniqueInput[]
    disconnect?: admin_sessionWhereUniqueInput | admin_sessionWhereUniqueInput[]
    delete?: admin_sessionWhereUniqueInput | admin_sessionWhereUniqueInput[]
    connect?: admin_sessionWhereUniqueInput | admin_sessionWhereUniqueInput[]
    update?: admin_sessionUpdateWithWhereUniqueWithoutAdminInput | admin_sessionUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: admin_sessionUpdateManyWithWhereWithoutAdminInput | admin_sessionUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: admin_sessionScalarWhereInput | admin_sessionScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type admin_sessionUncheckedUpdateManyWithoutAdminNestedInput = {
    create?: XOR<admin_sessionCreateWithoutAdminInput, admin_sessionUncheckedCreateWithoutAdminInput> | admin_sessionCreateWithoutAdminInput[] | admin_sessionUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: admin_sessionCreateOrConnectWithoutAdminInput | admin_sessionCreateOrConnectWithoutAdminInput[]
    upsert?: admin_sessionUpsertWithWhereUniqueWithoutAdminInput | admin_sessionUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: admin_sessionCreateManyAdminInputEnvelope
    set?: admin_sessionWhereUniqueInput | admin_sessionWhereUniqueInput[]
    disconnect?: admin_sessionWhereUniqueInput | admin_sessionWhereUniqueInput[]
    delete?: admin_sessionWhereUniqueInput | admin_sessionWhereUniqueInput[]
    connect?: admin_sessionWhereUniqueInput | admin_sessionWhereUniqueInput[]
    update?: admin_sessionUpdateWithWhereUniqueWithoutAdminInput | admin_sessionUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: admin_sessionUpdateManyWithWhereWithoutAdminInput | admin_sessionUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: admin_sessionScalarWhereInput | admin_sessionScalarWhereInput[]
  }

  export type userCreateNestedOneWithoutEventInput = {
    create?: XOR<userCreateWithoutEventInput, userUncheckedCreateWithoutEventInput>
    connectOrCreate?: userCreateOrConnectWithoutEventInput
    connect?: userWhereUniqueInput
  }

  export type user_registeredCreateNestedManyWithoutEventInput = {
    create?: XOR<user_registeredCreateWithoutEventInput, user_registeredUncheckedCreateWithoutEventInput> | user_registeredCreateWithoutEventInput[] | user_registeredUncheckedCreateWithoutEventInput[]
    connectOrCreate?: user_registeredCreateOrConnectWithoutEventInput | user_registeredCreateOrConnectWithoutEventInput[]
    createMany?: user_registeredCreateManyEventInputEnvelope
    connect?: user_registeredWhereUniqueInput | user_registeredWhereUniqueInput[]
  }

  export type user_registeredUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<user_registeredCreateWithoutEventInput, user_registeredUncheckedCreateWithoutEventInput> | user_registeredCreateWithoutEventInput[] | user_registeredUncheckedCreateWithoutEventInput[]
    connectOrCreate?: user_registeredCreateOrConnectWithoutEventInput | user_registeredCreateOrConnectWithoutEventInput[]
    createMany?: user_registeredCreateManyEventInputEnvelope
    connect?: user_registeredWhereUniqueInput | user_registeredWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableEnumevent_statusFieldUpdateOperationsInput = {
    set?: $Enums.event_status | null
  }

  export type userUpdateOneWithoutEventNestedInput = {
    create?: XOR<userCreateWithoutEventInput, userUncheckedCreateWithoutEventInput>
    connectOrCreate?: userCreateOrConnectWithoutEventInput
    upsert?: userUpsertWithoutEventInput
    disconnect?: userWhereInput | boolean
    delete?: userWhereInput | boolean
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutEventInput, userUpdateWithoutEventInput>, userUncheckedUpdateWithoutEventInput>
  }

  export type user_registeredUpdateManyWithoutEventNestedInput = {
    create?: XOR<user_registeredCreateWithoutEventInput, user_registeredUncheckedCreateWithoutEventInput> | user_registeredCreateWithoutEventInput[] | user_registeredUncheckedCreateWithoutEventInput[]
    connectOrCreate?: user_registeredCreateOrConnectWithoutEventInput | user_registeredCreateOrConnectWithoutEventInput[]
    upsert?: user_registeredUpsertWithWhereUniqueWithoutEventInput | user_registeredUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: user_registeredCreateManyEventInputEnvelope
    set?: user_registeredWhereUniqueInput | user_registeredWhereUniqueInput[]
    disconnect?: user_registeredWhereUniqueInput | user_registeredWhereUniqueInput[]
    delete?: user_registeredWhereUniqueInput | user_registeredWhereUniqueInput[]
    connect?: user_registeredWhereUniqueInput | user_registeredWhereUniqueInput[]
    update?: user_registeredUpdateWithWhereUniqueWithoutEventInput | user_registeredUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: user_registeredUpdateManyWithWhereWithoutEventInput | user_registeredUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: user_registeredScalarWhereInput | user_registeredScalarWhereInput[]
  }

  export type user_registeredUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<user_registeredCreateWithoutEventInput, user_registeredUncheckedCreateWithoutEventInput> | user_registeredCreateWithoutEventInput[] | user_registeredUncheckedCreateWithoutEventInput[]
    connectOrCreate?: user_registeredCreateOrConnectWithoutEventInput | user_registeredCreateOrConnectWithoutEventInput[]
    upsert?: user_registeredUpsertWithWhereUniqueWithoutEventInput | user_registeredUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: user_registeredCreateManyEventInputEnvelope
    set?: user_registeredWhereUniqueInput | user_registeredWhereUniqueInput[]
    disconnect?: user_registeredWhereUniqueInput | user_registeredWhereUniqueInput[]
    delete?: user_registeredWhereUniqueInput | user_registeredWhereUniqueInput[]
    connect?: user_registeredWhereUniqueInput | user_registeredWhereUniqueInput[]
    update?: user_registeredUpdateWithWhereUniqueWithoutEventInput | user_registeredUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: user_registeredUpdateManyWithWhereWithoutEventInput | user_registeredUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: user_registeredScalarWhereInput | user_registeredScalarWhereInput[]
  }

  export type eventCreateNestedManyWithoutUserInput = {
    create?: XOR<eventCreateWithoutUserInput, eventUncheckedCreateWithoutUserInput> | eventCreateWithoutUserInput[] | eventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: eventCreateOrConnectWithoutUserInput | eventCreateOrConnectWithoutUserInput[]
    createMany?: eventCreateManyUserInputEnvelope
    connect?: eventWhereUniqueInput | eventWhereUniqueInput[]
  }

  export type user_registeredCreateNestedManyWithoutUserInput = {
    create?: XOR<user_registeredCreateWithoutUserInput, user_registeredUncheckedCreateWithoutUserInput> | user_registeredCreateWithoutUserInput[] | user_registeredUncheckedCreateWithoutUserInput[]
    connectOrCreate?: user_registeredCreateOrConnectWithoutUserInput | user_registeredCreateOrConnectWithoutUserInput[]
    createMany?: user_registeredCreateManyUserInputEnvelope
    connect?: user_registeredWhereUniqueInput | user_registeredWhereUniqueInput[]
  }

  export type user_sessionCreateNestedManyWithoutUserInput = {
    create?: XOR<user_sessionCreateWithoutUserInput, user_sessionUncheckedCreateWithoutUserInput> | user_sessionCreateWithoutUserInput[] | user_sessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: user_sessionCreateOrConnectWithoutUserInput | user_sessionCreateOrConnectWithoutUserInput[]
    createMany?: user_sessionCreateManyUserInputEnvelope
    connect?: user_sessionWhereUniqueInput | user_sessionWhereUniqueInput[]
  }

  export type eventUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<eventCreateWithoutUserInput, eventUncheckedCreateWithoutUserInput> | eventCreateWithoutUserInput[] | eventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: eventCreateOrConnectWithoutUserInput | eventCreateOrConnectWithoutUserInput[]
    createMany?: eventCreateManyUserInputEnvelope
    connect?: eventWhereUniqueInput | eventWhereUniqueInput[]
  }

  export type user_registeredUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<user_registeredCreateWithoutUserInput, user_registeredUncheckedCreateWithoutUserInput> | user_registeredCreateWithoutUserInput[] | user_registeredUncheckedCreateWithoutUserInput[]
    connectOrCreate?: user_registeredCreateOrConnectWithoutUserInput | user_registeredCreateOrConnectWithoutUserInput[]
    createMany?: user_registeredCreateManyUserInputEnvelope
    connect?: user_registeredWhereUniqueInput | user_registeredWhereUniqueInput[]
  }

  export type user_sessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<user_sessionCreateWithoutUserInput, user_sessionUncheckedCreateWithoutUserInput> | user_sessionCreateWithoutUserInput[] | user_sessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: user_sessionCreateOrConnectWithoutUserInput | user_sessionCreateOrConnectWithoutUserInput[]
    createMany?: user_sessionCreateManyUserInputEnvelope
    connect?: user_sessionWhereUniqueInput | user_sessionWhereUniqueInput[]
  }

  export type Enumuser_genderFieldUpdateOperationsInput = {
    set?: $Enums.user_gender
  }

  export type eventUpdateManyWithoutUserNestedInput = {
    create?: XOR<eventCreateWithoutUserInput, eventUncheckedCreateWithoutUserInput> | eventCreateWithoutUserInput[] | eventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: eventCreateOrConnectWithoutUserInput | eventCreateOrConnectWithoutUserInput[]
    upsert?: eventUpsertWithWhereUniqueWithoutUserInput | eventUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: eventCreateManyUserInputEnvelope
    set?: eventWhereUniqueInput | eventWhereUniqueInput[]
    disconnect?: eventWhereUniqueInput | eventWhereUniqueInput[]
    delete?: eventWhereUniqueInput | eventWhereUniqueInput[]
    connect?: eventWhereUniqueInput | eventWhereUniqueInput[]
    update?: eventUpdateWithWhereUniqueWithoutUserInput | eventUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: eventUpdateManyWithWhereWithoutUserInput | eventUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: eventScalarWhereInput | eventScalarWhereInput[]
  }

  export type user_registeredUpdateManyWithoutUserNestedInput = {
    create?: XOR<user_registeredCreateWithoutUserInput, user_registeredUncheckedCreateWithoutUserInput> | user_registeredCreateWithoutUserInput[] | user_registeredUncheckedCreateWithoutUserInput[]
    connectOrCreate?: user_registeredCreateOrConnectWithoutUserInput | user_registeredCreateOrConnectWithoutUserInput[]
    upsert?: user_registeredUpsertWithWhereUniqueWithoutUserInput | user_registeredUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: user_registeredCreateManyUserInputEnvelope
    set?: user_registeredWhereUniqueInput | user_registeredWhereUniqueInput[]
    disconnect?: user_registeredWhereUniqueInput | user_registeredWhereUniqueInput[]
    delete?: user_registeredWhereUniqueInput | user_registeredWhereUniqueInput[]
    connect?: user_registeredWhereUniqueInput | user_registeredWhereUniqueInput[]
    update?: user_registeredUpdateWithWhereUniqueWithoutUserInput | user_registeredUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: user_registeredUpdateManyWithWhereWithoutUserInput | user_registeredUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: user_registeredScalarWhereInput | user_registeredScalarWhereInput[]
  }

  export type user_sessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<user_sessionCreateWithoutUserInput, user_sessionUncheckedCreateWithoutUserInput> | user_sessionCreateWithoutUserInput[] | user_sessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: user_sessionCreateOrConnectWithoutUserInput | user_sessionCreateOrConnectWithoutUserInput[]
    upsert?: user_sessionUpsertWithWhereUniqueWithoutUserInput | user_sessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: user_sessionCreateManyUserInputEnvelope
    set?: user_sessionWhereUniqueInput | user_sessionWhereUniqueInput[]
    disconnect?: user_sessionWhereUniqueInput | user_sessionWhereUniqueInput[]
    delete?: user_sessionWhereUniqueInput | user_sessionWhereUniqueInput[]
    connect?: user_sessionWhereUniqueInput | user_sessionWhereUniqueInput[]
    update?: user_sessionUpdateWithWhereUniqueWithoutUserInput | user_sessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: user_sessionUpdateManyWithWhereWithoutUserInput | user_sessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: user_sessionScalarWhereInput | user_sessionScalarWhereInput[]
  }

  export type eventUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<eventCreateWithoutUserInput, eventUncheckedCreateWithoutUserInput> | eventCreateWithoutUserInput[] | eventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: eventCreateOrConnectWithoutUserInput | eventCreateOrConnectWithoutUserInput[]
    upsert?: eventUpsertWithWhereUniqueWithoutUserInput | eventUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: eventCreateManyUserInputEnvelope
    set?: eventWhereUniqueInput | eventWhereUniqueInput[]
    disconnect?: eventWhereUniqueInput | eventWhereUniqueInput[]
    delete?: eventWhereUniqueInput | eventWhereUniqueInput[]
    connect?: eventWhereUniqueInput | eventWhereUniqueInput[]
    update?: eventUpdateWithWhereUniqueWithoutUserInput | eventUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: eventUpdateManyWithWhereWithoutUserInput | eventUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: eventScalarWhereInput | eventScalarWhereInput[]
  }

  export type user_registeredUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<user_registeredCreateWithoutUserInput, user_registeredUncheckedCreateWithoutUserInput> | user_registeredCreateWithoutUserInput[] | user_registeredUncheckedCreateWithoutUserInput[]
    connectOrCreate?: user_registeredCreateOrConnectWithoutUserInput | user_registeredCreateOrConnectWithoutUserInput[]
    upsert?: user_registeredUpsertWithWhereUniqueWithoutUserInput | user_registeredUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: user_registeredCreateManyUserInputEnvelope
    set?: user_registeredWhereUniqueInput | user_registeredWhereUniqueInput[]
    disconnect?: user_registeredWhereUniqueInput | user_registeredWhereUniqueInput[]
    delete?: user_registeredWhereUniqueInput | user_registeredWhereUniqueInput[]
    connect?: user_registeredWhereUniqueInput | user_registeredWhereUniqueInput[]
    update?: user_registeredUpdateWithWhereUniqueWithoutUserInput | user_registeredUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: user_registeredUpdateManyWithWhereWithoutUserInput | user_registeredUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: user_registeredScalarWhereInput | user_registeredScalarWhereInput[]
  }

  export type user_sessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<user_sessionCreateWithoutUserInput, user_sessionUncheckedCreateWithoutUserInput> | user_sessionCreateWithoutUserInput[] | user_sessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: user_sessionCreateOrConnectWithoutUserInput | user_sessionCreateOrConnectWithoutUserInput[]
    upsert?: user_sessionUpsertWithWhereUniqueWithoutUserInput | user_sessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: user_sessionCreateManyUserInputEnvelope
    set?: user_sessionWhereUniqueInput | user_sessionWhereUniqueInput[]
    disconnect?: user_sessionWhereUniqueInput | user_sessionWhereUniqueInput[]
    delete?: user_sessionWhereUniqueInput | user_sessionWhereUniqueInput[]
    connect?: user_sessionWhereUniqueInput | user_sessionWhereUniqueInput[]
    update?: user_sessionUpdateWithWhereUniqueWithoutUserInput | user_sessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: user_sessionUpdateManyWithWhereWithoutUserInput | user_sessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: user_sessionScalarWhereInput | user_sessionScalarWhereInput[]
  }

  export type userCreateNestedOneWithoutUser_registeredInput = {
    create?: XOR<userCreateWithoutUser_registeredInput, userUncheckedCreateWithoutUser_registeredInput>
    connectOrCreate?: userCreateOrConnectWithoutUser_registeredInput
    connect?: userWhereUniqueInput
  }

  export type eventCreateNestedOneWithoutUser_registeredInput = {
    create?: XOR<eventCreateWithoutUser_registeredInput, eventUncheckedCreateWithoutUser_registeredInput>
    connectOrCreate?: eventCreateOrConnectWithoutUser_registeredInput
    connect?: eventWhereUniqueInput
  }

  export type NullableEnumusreg_statusFieldUpdateOperationsInput = {
    set?: $Enums.usreg_status | null
  }

  export type userUpdateOneWithoutUser_registeredNestedInput = {
    create?: XOR<userCreateWithoutUser_registeredInput, userUncheckedCreateWithoutUser_registeredInput>
    connectOrCreate?: userCreateOrConnectWithoutUser_registeredInput
    upsert?: userUpsertWithoutUser_registeredInput
    disconnect?: userWhereInput | boolean
    delete?: userWhereInput | boolean
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutUser_registeredInput, userUpdateWithoutUser_registeredInput>, userUncheckedUpdateWithoutUser_registeredInput>
  }

  export type eventUpdateOneWithoutUser_registeredNestedInput = {
    create?: XOR<eventCreateWithoutUser_registeredInput, eventUncheckedCreateWithoutUser_registeredInput>
    connectOrCreate?: eventCreateOrConnectWithoutUser_registeredInput
    upsert?: eventUpsertWithoutUser_registeredInput
    disconnect?: eventWhereInput | boolean
    delete?: eventWhereInput | boolean
    connect?: eventWhereUniqueInput
    update?: XOR<XOR<eventUpdateToOneWithWhereWithoutUser_registeredInput, eventUpdateWithoutUser_registeredInput>, eventUncheckedUpdateWithoutUser_registeredInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type adminCreateNestedOneWithoutAdmin_sessionInput = {
    create?: XOR<adminCreateWithoutAdmin_sessionInput, adminUncheckedCreateWithoutAdmin_sessionInput>
    connectOrCreate?: adminCreateOrConnectWithoutAdmin_sessionInput
    connect?: adminWhereUniqueInput
  }

  export type adminUpdateOneWithoutAdmin_sessionNestedInput = {
    create?: XOR<adminCreateWithoutAdmin_sessionInput, adminUncheckedCreateWithoutAdmin_sessionInput>
    connectOrCreate?: adminCreateOrConnectWithoutAdmin_sessionInput
    upsert?: adminUpsertWithoutAdmin_sessionInput
    disconnect?: adminWhereInput | boolean
    delete?: adminWhereInput | boolean
    connect?: adminWhereUniqueInput
    update?: XOR<XOR<adminUpdateToOneWithWhereWithoutAdmin_sessionInput, adminUpdateWithoutAdmin_sessionInput>, adminUncheckedUpdateWithoutAdmin_sessionInput>
  }

  export type userCreateNestedOneWithoutUser_sessionInput = {
    create?: XOR<userCreateWithoutUser_sessionInput, userUncheckedCreateWithoutUser_sessionInput>
    connectOrCreate?: userCreateOrConnectWithoutUser_sessionInput
    connect?: userWhereUniqueInput
  }

  export type userUpdateOneWithoutUser_sessionNestedInput = {
    create?: XOR<userCreateWithoutUser_sessionInput, userUncheckedCreateWithoutUser_sessionInput>
    connectOrCreate?: userCreateOrConnectWithoutUser_sessionInput
    upsert?: userUpsertWithoutUser_sessionInput
    disconnect?: userWhereInput | boolean
    delete?: userWhereInput | boolean
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutUser_sessionInput, userUpdateWithoutUser_sessionInput>, userUncheckedUpdateWithoutUser_sessionInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumevent_statusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.event_status | Enumevent_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.event_status[] | null
    notIn?: $Enums.event_status[] | null
    not?: NestedEnumevent_statusNullableFilter<$PrismaModel> | $Enums.event_status | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumevent_statusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.event_status | Enumevent_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.event_status[] | null
    notIn?: $Enums.event_status[] | null
    not?: NestedEnumevent_statusNullableWithAggregatesFilter<$PrismaModel> | $Enums.event_status | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumevent_statusNullableFilter<$PrismaModel>
    _max?: NestedEnumevent_statusNullableFilter<$PrismaModel>
  }

  export type NestedEnumuser_genderFilter<$PrismaModel = never> = {
    equals?: $Enums.user_gender | Enumuser_genderFieldRefInput<$PrismaModel>
    in?: $Enums.user_gender[]
    notIn?: $Enums.user_gender[]
    not?: NestedEnumuser_genderFilter<$PrismaModel> | $Enums.user_gender
  }

  export type NestedEnumuser_genderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.user_gender | Enumuser_genderFieldRefInput<$PrismaModel>
    in?: $Enums.user_gender[]
    notIn?: $Enums.user_gender[]
    not?: NestedEnumuser_genderWithAggregatesFilter<$PrismaModel> | $Enums.user_gender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumuser_genderFilter<$PrismaModel>
    _max?: NestedEnumuser_genderFilter<$PrismaModel>
  }

  export type NestedEnumusreg_statusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.usreg_status | Enumusreg_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.usreg_status[] | null
    notIn?: $Enums.usreg_status[] | null
    not?: NestedEnumusreg_statusNullableFilter<$PrismaModel> | $Enums.usreg_status | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumusreg_statusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.usreg_status | Enumusreg_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.usreg_status[] | null
    notIn?: $Enums.usreg_status[] | null
    not?: NestedEnumusreg_statusNullableWithAggregatesFilter<$PrismaModel> | $Enums.usreg_status | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumusreg_statusNullableFilter<$PrismaModel>
    _max?: NestedEnumusreg_statusNullableFilter<$PrismaModel>
  }

  export type admin_sessionCreateWithoutAdminInput = {
    id: string
  }

  export type admin_sessionUncheckedCreateWithoutAdminInput = {
    id: string
  }

  export type admin_sessionCreateOrConnectWithoutAdminInput = {
    where: admin_sessionWhereUniqueInput
    create: XOR<admin_sessionCreateWithoutAdminInput, admin_sessionUncheckedCreateWithoutAdminInput>
  }

  export type admin_sessionCreateManyAdminInputEnvelope = {
    data: admin_sessionCreateManyAdminInput | admin_sessionCreateManyAdminInput[]
    skipDuplicates?: boolean
  }

  export type admin_sessionUpsertWithWhereUniqueWithoutAdminInput = {
    where: admin_sessionWhereUniqueInput
    update: XOR<admin_sessionUpdateWithoutAdminInput, admin_sessionUncheckedUpdateWithoutAdminInput>
    create: XOR<admin_sessionCreateWithoutAdminInput, admin_sessionUncheckedCreateWithoutAdminInput>
  }

  export type admin_sessionUpdateWithWhereUniqueWithoutAdminInput = {
    where: admin_sessionWhereUniqueInput
    data: XOR<admin_sessionUpdateWithoutAdminInput, admin_sessionUncheckedUpdateWithoutAdminInput>
  }

  export type admin_sessionUpdateManyWithWhereWithoutAdminInput = {
    where: admin_sessionScalarWhereInput
    data: XOR<admin_sessionUpdateManyMutationInput, admin_sessionUncheckedUpdateManyWithoutAdminInput>
  }

  export type admin_sessionScalarWhereInput = {
    AND?: admin_sessionScalarWhereInput | admin_sessionScalarWhereInput[]
    OR?: admin_sessionScalarWhereInput[]
    NOT?: admin_sessionScalarWhereInput | admin_sessionScalarWhereInput[]
    id?: StringFilter<"admin_session"> | string
    admin_id?: IntNullableFilter<"admin_session"> | number | null
  }

  export type userCreateWithoutEventInput = {
    nim: string
    nama_depan?: string | null
    nama_belakang?: string | null
    email: string
    phone: string
    password: string
    fakultas: string
    program_studi: string
    gender: $Enums.user_gender
    created_at?: Date | string
    user_registered?: user_registeredCreateNestedManyWithoutUserInput
    user_session?: user_sessionCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutEventInput = {
    nim: string
    nama_depan?: string | null
    nama_belakang?: string | null
    email: string
    phone: string
    password: string
    fakultas: string
    program_studi: string
    gender: $Enums.user_gender
    created_at?: Date | string
    user_registered?: user_registeredUncheckedCreateNestedManyWithoutUserInput
    user_session?: user_sessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutEventInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutEventInput, userUncheckedCreateWithoutEventInput>
  }

  export type user_registeredCreateWithoutEventInput = {
    alasan_join?: string | null
    cv?: string | null
    created_at?: Date | string
    divisi?: string | null
    status?: $Enums.usreg_status | null
    jabatan?: string | null
    user?: userCreateNestedOneWithoutUser_registeredInput
  }

  export type user_registeredUncheckedCreateWithoutEventInput = {
    id?: number
    user_nim?: string | null
    alasan_join?: string | null
    cv?: string | null
    created_at?: Date | string
    divisi?: string | null
    status?: $Enums.usreg_status | null
    jabatan?: string | null
  }

  export type user_registeredCreateOrConnectWithoutEventInput = {
    where: user_registeredWhereUniqueInput
    create: XOR<user_registeredCreateWithoutEventInput, user_registeredUncheckedCreateWithoutEventInput>
  }

  export type user_registeredCreateManyEventInputEnvelope = {
    data: user_registeredCreateManyEventInput | user_registeredCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type userUpsertWithoutEventInput = {
    update: XOR<userUpdateWithoutEventInput, userUncheckedUpdateWithoutEventInput>
    create: XOR<userCreateWithoutEventInput, userUncheckedCreateWithoutEventInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutEventInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutEventInput, userUncheckedUpdateWithoutEventInput>
  }

  export type userUpdateWithoutEventInput = {
    nim?: StringFieldUpdateOperationsInput | string
    nama_depan?: NullableStringFieldUpdateOperationsInput | string | null
    nama_belakang?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fakultas?: StringFieldUpdateOperationsInput | string
    program_studi?: StringFieldUpdateOperationsInput | string
    gender?: Enumuser_genderFieldUpdateOperationsInput | $Enums.user_gender
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_registered?: user_registeredUpdateManyWithoutUserNestedInput
    user_session?: user_sessionUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutEventInput = {
    nim?: StringFieldUpdateOperationsInput | string
    nama_depan?: NullableStringFieldUpdateOperationsInput | string | null
    nama_belakang?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fakultas?: StringFieldUpdateOperationsInput | string
    program_studi?: StringFieldUpdateOperationsInput | string
    gender?: Enumuser_genderFieldUpdateOperationsInput | $Enums.user_gender
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_registered?: user_registeredUncheckedUpdateManyWithoutUserNestedInput
    user_session?: user_sessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type user_registeredUpsertWithWhereUniqueWithoutEventInput = {
    where: user_registeredWhereUniqueInput
    update: XOR<user_registeredUpdateWithoutEventInput, user_registeredUncheckedUpdateWithoutEventInput>
    create: XOR<user_registeredCreateWithoutEventInput, user_registeredUncheckedCreateWithoutEventInput>
  }

  export type user_registeredUpdateWithWhereUniqueWithoutEventInput = {
    where: user_registeredWhereUniqueInput
    data: XOR<user_registeredUpdateWithoutEventInput, user_registeredUncheckedUpdateWithoutEventInput>
  }

  export type user_registeredUpdateManyWithWhereWithoutEventInput = {
    where: user_registeredScalarWhereInput
    data: XOR<user_registeredUpdateManyMutationInput, user_registeredUncheckedUpdateManyWithoutEventInput>
  }

  export type user_registeredScalarWhereInput = {
    AND?: user_registeredScalarWhereInput | user_registeredScalarWhereInput[]
    OR?: user_registeredScalarWhereInput[]
    NOT?: user_registeredScalarWhereInput | user_registeredScalarWhereInput[]
    id?: IntFilter<"user_registered"> | number
    user_nim?: StringNullableFilter<"user_registered"> | string | null
    event_id?: IntNullableFilter<"user_registered"> | number | null
    alasan_join?: StringNullableFilter<"user_registered"> | string | null
    cv?: StringNullableFilter<"user_registered"> | string | null
    created_at?: DateTimeFilter<"user_registered"> | Date | string
    divisi?: StringNullableFilter<"user_registered"> | string | null
    status?: Enumusreg_statusNullableFilter<"user_registered"> | $Enums.usreg_status | null
    jabatan?: StringNullableFilter<"user_registered"> | string | null
  }

  export type eventCreateWithoutUserInput = {
    nama_event: string
    deskripsi_event?: string | null
    poster_event: string
    penyelenggara_event: string
    benefit_event?: string | null
    kepanitiaan_mulai?: Date | string
    kepanitiaan_selesai?: Date | string
    klasifikasi_divisi?: string | null
    event_mulai?: Date | string
    event_selesai?: Date | string
    email_event?: string | null
    status?: $Enums.event_status | null
    created_at?: Date | string
    user_registered?: user_registeredCreateNestedManyWithoutEventInput
  }

  export type eventUncheckedCreateWithoutUserInput = {
    id?: number
    nama_event: string
    deskripsi_event?: string | null
    poster_event: string
    penyelenggara_event: string
    benefit_event?: string | null
    kepanitiaan_mulai?: Date | string
    kepanitiaan_selesai?: Date | string
    klasifikasi_divisi?: string | null
    event_mulai?: Date | string
    event_selesai?: Date | string
    email_event?: string | null
    status?: $Enums.event_status | null
    created_at?: Date | string
    user_registered?: user_registeredUncheckedCreateNestedManyWithoutEventInput
  }

  export type eventCreateOrConnectWithoutUserInput = {
    where: eventWhereUniqueInput
    create: XOR<eventCreateWithoutUserInput, eventUncheckedCreateWithoutUserInput>
  }

  export type eventCreateManyUserInputEnvelope = {
    data: eventCreateManyUserInput | eventCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type user_registeredCreateWithoutUserInput = {
    alasan_join?: string | null
    cv?: string | null
    created_at?: Date | string
    divisi?: string | null
    status?: $Enums.usreg_status | null
    jabatan?: string | null
    event?: eventCreateNestedOneWithoutUser_registeredInput
  }

  export type user_registeredUncheckedCreateWithoutUserInput = {
    id?: number
    event_id?: number | null
    alasan_join?: string | null
    cv?: string | null
    created_at?: Date | string
    divisi?: string | null
    status?: $Enums.usreg_status | null
    jabatan?: string | null
  }

  export type user_registeredCreateOrConnectWithoutUserInput = {
    where: user_registeredWhereUniqueInput
    create: XOR<user_registeredCreateWithoutUserInput, user_registeredUncheckedCreateWithoutUserInput>
  }

  export type user_registeredCreateManyUserInputEnvelope = {
    data: user_registeredCreateManyUserInput | user_registeredCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type user_sessionCreateWithoutUserInput = {
    id: string
  }

  export type user_sessionUncheckedCreateWithoutUserInput = {
    id: string
  }

  export type user_sessionCreateOrConnectWithoutUserInput = {
    where: user_sessionWhereUniqueInput
    create: XOR<user_sessionCreateWithoutUserInput, user_sessionUncheckedCreateWithoutUserInput>
  }

  export type user_sessionCreateManyUserInputEnvelope = {
    data: user_sessionCreateManyUserInput | user_sessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type eventUpsertWithWhereUniqueWithoutUserInput = {
    where: eventWhereUniqueInput
    update: XOR<eventUpdateWithoutUserInput, eventUncheckedUpdateWithoutUserInput>
    create: XOR<eventCreateWithoutUserInput, eventUncheckedCreateWithoutUserInput>
  }

  export type eventUpdateWithWhereUniqueWithoutUserInput = {
    where: eventWhereUniqueInput
    data: XOR<eventUpdateWithoutUserInput, eventUncheckedUpdateWithoutUserInput>
  }

  export type eventUpdateManyWithWhereWithoutUserInput = {
    where: eventScalarWhereInput
    data: XOR<eventUpdateManyMutationInput, eventUncheckedUpdateManyWithoutUserInput>
  }

  export type eventScalarWhereInput = {
    AND?: eventScalarWhereInput | eventScalarWhereInput[]
    OR?: eventScalarWhereInput[]
    NOT?: eventScalarWhereInput | eventScalarWhereInput[]
    id?: IntFilter<"event"> | number
    nama_event?: StringFilter<"event"> | string
    deskripsi_event?: StringNullableFilter<"event"> | string | null
    poster_event?: StringFilter<"event"> | string
    penyelenggara_event?: StringFilter<"event"> | string
    benefit_event?: StringNullableFilter<"event"> | string | null
    kepanitiaan_mulai?: DateTimeFilter<"event"> | Date | string
    kepanitiaan_selesai?: DateTimeFilter<"event"> | Date | string
    klasifikasi_divisi?: StringNullableFilter<"event"> | string | null
    event_mulai?: DateTimeFilter<"event"> | Date | string
    event_selesai?: DateTimeFilter<"event"> | Date | string
    email_event?: StringNullableFilter<"event"> | string | null
    status?: Enumevent_statusNullableFilter<"event"> | $Enums.event_status | null
    created_at?: DateTimeFilter<"event"> | Date | string
    user_nim?: StringNullableFilter<"event"> | string | null
  }

  export type user_registeredUpsertWithWhereUniqueWithoutUserInput = {
    where: user_registeredWhereUniqueInput
    update: XOR<user_registeredUpdateWithoutUserInput, user_registeredUncheckedUpdateWithoutUserInput>
    create: XOR<user_registeredCreateWithoutUserInput, user_registeredUncheckedCreateWithoutUserInput>
  }

  export type user_registeredUpdateWithWhereUniqueWithoutUserInput = {
    where: user_registeredWhereUniqueInput
    data: XOR<user_registeredUpdateWithoutUserInput, user_registeredUncheckedUpdateWithoutUserInput>
  }

  export type user_registeredUpdateManyWithWhereWithoutUserInput = {
    where: user_registeredScalarWhereInput
    data: XOR<user_registeredUpdateManyMutationInput, user_registeredUncheckedUpdateManyWithoutUserInput>
  }

  export type user_sessionUpsertWithWhereUniqueWithoutUserInput = {
    where: user_sessionWhereUniqueInput
    update: XOR<user_sessionUpdateWithoutUserInput, user_sessionUncheckedUpdateWithoutUserInput>
    create: XOR<user_sessionCreateWithoutUserInput, user_sessionUncheckedCreateWithoutUserInput>
  }

  export type user_sessionUpdateWithWhereUniqueWithoutUserInput = {
    where: user_sessionWhereUniqueInput
    data: XOR<user_sessionUpdateWithoutUserInput, user_sessionUncheckedUpdateWithoutUserInput>
  }

  export type user_sessionUpdateManyWithWhereWithoutUserInput = {
    where: user_sessionScalarWhereInput
    data: XOR<user_sessionUpdateManyMutationInput, user_sessionUncheckedUpdateManyWithoutUserInput>
  }

  export type user_sessionScalarWhereInput = {
    AND?: user_sessionScalarWhereInput | user_sessionScalarWhereInput[]
    OR?: user_sessionScalarWhereInput[]
    NOT?: user_sessionScalarWhereInput | user_sessionScalarWhereInput[]
    id?: StringFilter<"user_session"> | string
    user_nim?: StringNullableFilter<"user_session"> | string | null
  }

  export type userCreateWithoutUser_registeredInput = {
    nim: string
    nama_depan?: string | null
    nama_belakang?: string | null
    email: string
    phone: string
    password: string
    fakultas: string
    program_studi: string
    gender: $Enums.user_gender
    created_at?: Date | string
    event?: eventCreateNestedManyWithoutUserInput
    user_session?: user_sessionCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutUser_registeredInput = {
    nim: string
    nama_depan?: string | null
    nama_belakang?: string | null
    email: string
    phone: string
    password: string
    fakultas: string
    program_studi: string
    gender: $Enums.user_gender
    created_at?: Date | string
    event?: eventUncheckedCreateNestedManyWithoutUserInput
    user_session?: user_sessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutUser_registeredInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutUser_registeredInput, userUncheckedCreateWithoutUser_registeredInput>
  }

  export type eventCreateWithoutUser_registeredInput = {
    nama_event: string
    deskripsi_event?: string | null
    poster_event: string
    penyelenggara_event: string
    benefit_event?: string | null
    kepanitiaan_mulai?: Date | string
    kepanitiaan_selesai?: Date | string
    klasifikasi_divisi?: string | null
    event_mulai?: Date | string
    event_selesai?: Date | string
    email_event?: string | null
    status?: $Enums.event_status | null
    created_at?: Date | string
    user?: userCreateNestedOneWithoutEventInput
  }

  export type eventUncheckedCreateWithoutUser_registeredInput = {
    id?: number
    nama_event: string
    deskripsi_event?: string | null
    poster_event: string
    penyelenggara_event: string
    benefit_event?: string | null
    kepanitiaan_mulai?: Date | string
    kepanitiaan_selesai?: Date | string
    klasifikasi_divisi?: string | null
    event_mulai?: Date | string
    event_selesai?: Date | string
    email_event?: string | null
    status?: $Enums.event_status | null
    created_at?: Date | string
    user_nim?: string | null
  }

  export type eventCreateOrConnectWithoutUser_registeredInput = {
    where: eventWhereUniqueInput
    create: XOR<eventCreateWithoutUser_registeredInput, eventUncheckedCreateWithoutUser_registeredInput>
  }

  export type userUpsertWithoutUser_registeredInput = {
    update: XOR<userUpdateWithoutUser_registeredInput, userUncheckedUpdateWithoutUser_registeredInput>
    create: XOR<userCreateWithoutUser_registeredInput, userUncheckedCreateWithoutUser_registeredInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutUser_registeredInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutUser_registeredInput, userUncheckedUpdateWithoutUser_registeredInput>
  }

  export type userUpdateWithoutUser_registeredInput = {
    nim?: StringFieldUpdateOperationsInput | string
    nama_depan?: NullableStringFieldUpdateOperationsInput | string | null
    nama_belakang?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fakultas?: StringFieldUpdateOperationsInput | string
    program_studi?: StringFieldUpdateOperationsInput | string
    gender?: Enumuser_genderFieldUpdateOperationsInput | $Enums.user_gender
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: eventUpdateManyWithoutUserNestedInput
    user_session?: user_sessionUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutUser_registeredInput = {
    nim?: StringFieldUpdateOperationsInput | string
    nama_depan?: NullableStringFieldUpdateOperationsInput | string | null
    nama_belakang?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fakultas?: StringFieldUpdateOperationsInput | string
    program_studi?: StringFieldUpdateOperationsInput | string
    gender?: Enumuser_genderFieldUpdateOperationsInput | $Enums.user_gender
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: eventUncheckedUpdateManyWithoutUserNestedInput
    user_session?: user_sessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type eventUpsertWithoutUser_registeredInput = {
    update: XOR<eventUpdateWithoutUser_registeredInput, eventUncheckedUpdateWithoutUser_registeredInput>
    create: XOR<eventCreateWithoutUser_registeredInput, eventUncheckedCreateWithoutUser_registeredInput>
    where?: eventWhereInput
  }

  export type eventUpdateToOneWithWhereWithoutUser_registeredInput = {
    where?: eventWhereInput
    data: XOR<eventUpdateWithoutUser_registeredInput, eventUncheckedUpdateWithoutUser_registeredInput>
  }

  export type eventUpdateWithoutUser_registeredInput = {
    nama_event?: StringFieldUpdateOperationsInput | string
    deskripsi_event?: NullableStringFieldUpdateOperationsInput | string | null
    poster_event?: StringFieldUpdateOperationsInput | string
    penyelenggara_event?: StringFieldUpdateOperationsInput | string
    benefit_event?: NullableStringFieldUpdateOperationsInput | string | null
    kepanitiaan_mulai?: DateTimeFieldUpdateOperationsInput | Date | string
    kepanitiaan_selesai?: DateTimeFieldUpdateOperationsInput | Date | string
    klasifikasi_divisi?: NullableStringFieldUpdateOperationsInput | string | null
    event_mulai?: DateTimeFieldUpdateOperationsInput | Date | string
    event_selesai?: DateTimeFieldUpdateOperationsInput | Date | string
    email_event?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumevent_statusFieldUpdateOperationsInput | $Enums.event_status | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneWithoutEventNestedInput
  }

  export type eventUncheckedUpdateWithoutUser_registeredInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama_event?: StringFieldUpdateOperationsInput | string
    deskripsi_event?: NullableStringFieldUpdateOperationsInput | string | null
    poster_event?: StringFieldUpdateOperationsInput | string
    penyelenggara_event?: StringFieldUpdateOperationsInput | string
    benefit_event?: NullableStringFieldUpdateOperationsInput | string | null
    kepanitiaan_mulai?: DateTimeFieldUpdateOperationsInput | Date | string
    kepanitiaan_selesai?: DateTimeFieldUpdateOperationsInput | Date | string
    klasifikasi_divisi?: NullableStringFieldUpdateOperationsInput | string | null
    event_mulai?: DateTimeFieldUpdateOperationsInput | Date | string
    event_selesai?: DateTimeFieldUpdateOperationsInput | Date | string
    email_event?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumevent_statusFieldUpdateOperationsInput | $Enums.event_status | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_nim?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type adminCreateWithoutAdmin_sessionInput = {
    email?: string | null
    password?: string | null
  }

  export type adminUncheckedCreateWithoutAdmin_sessionInput = {
    id?: number
    email?: string | null
    password?: string | null
  }

  export type adminCreateOrConnectWithoutAdmin_sessionInput = {
    where: adminWhereUniqueInput
    create: XOR<adminCreateWithoutAdmin_sessionInput, adminUncheckedCreateWithoutAdmin_sessionInput>
  }

  export type adminUpsertWithoutAdmin_sessionInput = {
    update: XOR<adminUpdateWithoutAdmin_sessionInput, adminUncheckedUpdateWithoutAdmin_sessionInput>
    create: XOR<adminCreateWithoutAdmin_sessionInput, adminUncheckedCreateWithoutAdmin_sessionInput>
    where?: adminWhereInput
  }

  export type adminUpdateToOneWithWhereWithoutAdmin_sessionInput = {
    where?: adminWhereInput
    data: XOR<adminUpdateWithoutAdmin_sessionInput, adminUncheckedUpdateWithoutAdmin_sessionInput>
  }

  export type adminUpdateWithoutAdmin_sessionInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type adminUncheckedUpdateWithoutAdmin_sessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type userCreateWithoutUser_sessionInput = {
    nim: string
    nama_depan?: string | null
    nama_belakang?: string | null
    email: string
    phone: string
    password: string
    fakultas: string
    program_studi: string
    gender: $Enums.user_gender
    created_at?: Date | string
    event?: eventCreateNestedManyWithoutUserInput
    user_registered?: user_registeredCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutUser_sessionInput = {
    nim: string
    nama_depan?: string | null
    nama_belakang?: string | null
    email: string
    phone: string
    password: string
    fakultas: string
    program_studi: string
    gender: $Enums.user_gender
    created_at?: Date | string
    event?: eventUncheckedCreateNestedManyWithoutUserInput
    user_registered?: user_registeredUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutUser_sessionInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutUser_sessionInput, userUncheckedCreateWithoutUser_sessionInput>
  }

  export type userUpsertWithoutUser_sessionInput = {
    update: XOR<userUpdateWithoutUser_sessionInput, userUncheckedUpdateWithoutUser_sessionInput>
    create: XOR<userCreateWithoutUser_sessionInput, userUncheckedCreateWithoutUser_sessionInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutUser_sessionInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutUser_sessionInput, userUncheckedUpdateWithoutUser_sessionInput>
  }

  export type userUpdateWithoutUser_sessionInput = {
    nim?: StringFieldUpdateOperationsInput | string
    nama_depan?: NullableStringFieldUpdateOperationsInput | string | null
    nama_belakang?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fakultas?: StringFieldUpdateOperationsInput | string
    program_studi?: StringFieldUpdateOperationsInput | string
    gender?: Enumuser_genderFieldUpdateOperationsInput | $Enums.user_gender
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: eventUpdateManyWithoutUserNestedInput
    user_registered?: user_registeredUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutUser_sessionInput = {
    nim?: StringFieldUpdateOperationsInput | string
    nama_depan?: NullableStringFieldUpdateOperationsInput | string | null
    nama_belakang?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fakultas?: StringFieldUpdateOperationsInput | string
    program_studi?: StringFieldUpdateOperationsInput | string
    gender?: Enumuser_genderFieldUpdateOperationsInput | $Enums.user_gender
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: eventUncheckedUpdateManyWithoutUserNestedInput
    user_registered?: user_registeredUncheckedUpdateManyWithoutUserNestedInput
  }

  export type admin_sessionCreateManyAdminInput = {
    id: string
  }

  export type admin_sessionUpdateWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type admin_sessionUncheckedUpdateWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type admin_sessionUncheckedUpdateManyWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type user_registeredCreateManyEventInput = {
    id?: number
    user_nim?: string | null
    alasan_join?: string | null
    cv?: string | null
    created_at?: Date | string
    divisi?: string | null
    status?: $Enums.usreg_status | null
    jabatan?: string | null
  }

  export type user_registeredUpdateWithoutEventInput = {
    alasan_join?: NullableStringFieldUpdateOperationsInput | string | null
    cv?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    divisi?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumusreg_statusFieldUpdateOperationsInput | $Enums.usreg_status | null
    jabatan?: NullableStringFieldUpdateOperationsInput | string | null
    user?: userUpdateOneWithoutUser_registeredNestedInput
  }

  export type user_registeredUncheckedUpdateWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_nim?: NullableStringFieldUpdateOperationsInput | string | null
    alasan_join?: NullableStringFieldUpdateOperationsInput | string | null
    cv?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    divisi?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumusreg_statusFieldUpdateOperationsInput | $Enums.usreg_status | null
    jabatan?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_registeredUncheckedUpdateManyWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_nim?: NullableStringFieldUpdateOperationsInput | string | null
    alasan_join?: NullableStringFieldUpdateOperationsInput | string | null
    cv?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    divisi?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumusreg_statusFieldUpdateOperationsInput | $Enums.usreg_status | null
    jabatan?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type eventCreateManyUserInput = {
    id?: number
    nama_event: string
    deskripsi_event?: string | null
    poster_event: string
    penyelenggara_event: string
    benefit_event?: string | null
    kepanitiaan_mulai?: Date | string
    kepanitiaan_selesai?: Date | string
    klasifikasi_divisi?: string | null
    event_mulai?: Date | string
    event_selesai?: Date | string
    email_event?: string | null
    status?: $Enums.event_status | null
    created_at?: Date | string
  }

  export type user_registeredCreateManyUserInput = {
    id?: number
    event_id?: number | null
    alasan_join?: string | null
    cv?: string | null
    created_at?: Date | string
    divisi?: string | null
    status?: $Enums.usreg_status | null
    jabatan?: string | null
  }

  export type user_sessionCreateManyUserInput = {
    id: string
  }

  export type eventUpdateWithoutUserInput = {
    nama_event?: StringFieldUpdateOperationsInput | string
    deskripsi_event?: NullableStringFieldUpdateOperationsInput | string | null
    poster_event?: StringFieldUpdateOperationsInput | string
    penyelenggara_event?: StringFieldUpdateOperationsInput | string
    benefit_event?: NullableStringFieldUpdateOperationsInput | string | null
    kepanitiaan_mulai?: DateTimeFieldUpdateOperationsInput | Date | string
    kepanitiaan_selesai?: DateTimeFieldUpdateOperationsInput | Date | string
    klasifikasi_divisi?: NullableStringFieldUpdateOperationsInput | string | null
    event_mulai?: DateTimeFieldUpdateOperationsInput | Date | string
    event_selesai?: DateTimeFieldUpdateOperationsInput | Date | string
    email_event?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumevent_statusFieldUpdateOperationsInput | $Enums.event_status | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_registered?: user_registeredUpdateManyWithoutEventNestedInput
  }

  export type eventUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama_event?: StringFieldUpdateOperationsInput | string
    deskripsi_event?: NullableStringFieldUpdateOperationsInput | string | null
    poster_event?: StringFieldUpdateOperationsInput | string
    penyelenggara_event?: StringFieldUpdateOperationsInput | string
    benefit_event?: NullableStringFieldUpdateOperationsInput | string | null
    kepanitiaan_mulai?: DateTimeFieldUpdateOperationsInput | Date | string
    kepanitiaan_selesai?: DateTimeFieldUpdateOperationsInput | Date | string
    klasifikasi_divisi?: NullableStringFieldUpdateOperationsInput | string | null
    event_mulai?: DateTimeFieldUpdateOperationsInput | Date | string
    event_selesai?: DateTimeFieldUpdateOperationsInput | Date | string
    email_event?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumevent_statusFieldUpdateOperationsInput | $Enums.event_status | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_registered?: user_registeredUncheckedUpdateManyWithoutEventNestedInput
  }

  export type eventUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama_event?: StringFieldUpdateOperationsInput | string
    deskripsi_event?: NullableStringFieldUpdateOperationsInput | string | null
    poster_event?: StringFieldUpdateOperationsInput | string
    penyelenggara_event?: StringFieldUpdateOperationsInput | string
    benefit_event?: NullableStringFieldUpdateOperationsInput | string | null
    kepanitiaan_mulai?: DateTimeFieldUpdateOperationsInput | Date | string
    kepanitiaan_selesai?: DateTimeFieldUpdateOperationsInput | Date | string
    klasifikasi_divisi?: NullableStringFieldUpdateOperationsInput | string | null
    event_mulai?: DateTimeFieldUpdateOperationsInput | Date | string
    event_selesai?: DateTimeFieldUpdateOperationsInput | Date | string
    email_event?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumevent_statusFieldUpdateOperationsInput | $Enums.event_status | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type user_registeredUpdateWithoutUserInput = {
    alasan_join?: NullableStringFieldUpdateOperationsInput | string | null
    cv?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    divisi?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumusreg_statusFieldUpdateOperationsInput | $Enums.usreg_status | null
    jabatan?: NullableStringFieldUpdateOperationsInput | string | null
    event?: eventUpdateOneWithoutUser_registeredNestedInput
  }

  export type user_registeredUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    event_id?: NullableIntFieldUpdateOperationsInput | number | null
    alasan_join?: NullableStringFieldUpdateOperationsInput | string | null
    cv?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    divisi?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumusreg_statusFieldUpdateOperationsInput | $Enums.usreg_status | null
    jabatan?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_registeredUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    event_id?: NullableIntFieldUpdateOperationsInput | number | null
    alasan_join?: NullableStringFieldUpdateOperationsInput | string | null
    cv?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    divisi?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumusreg_statusFieldUpdateOperationsInput | $Enums.usreg_status | null
    jabatan?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_sessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type user_sessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type user_sessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use AdminCountOutputTypeDefaultArgs instead
     */
    export type AdminCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AdminCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventCountOutputTypeDefaultArgs instead
     */
    export type EventCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use adminDefaultArgs instead
     */
    export type adminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = adminDefaultArgs<ExtArgs>
    /**
     * @deprecated Use eventDefaultArgs instead
     */
    export type eventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = eventDefaultArgs<ExtArgs>
    /**
     * @deprecated Use userDefaultArgs instead
     */
    export type userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = userDefaultArgs<ExtArgs>
    /**
     * @deprecated Use user_registeredDefaultArgs instead
     */
    export type user_registeredArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = user_registeredDefaultArgs<ExtArgs>
    /**
     * @deprecated Use admin_sessionDefaultArgs instead
     */
    export type admin_sessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = admin_sessionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use user_sessionDefaultArgs instead
     */
    export type user_sessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = user_sessionDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}